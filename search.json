[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code and data for “doubletrouble: an R/Bioconductor package for the identification, classification, and analyses of gene and genome duplications”",
    "section": "",
    "text": "Preface\nThis book contains all code and data used in the paper doubletrouble: an R/Bioconductor package for the identification, classification, and analyses of gene and genome duplications, and it is intended to make all analyses fully reproducible.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html",
    "href": "chapters/chapter_01.html",
    "title": "1  Obtaining species trees for Ensembl instances",
    "section": "",
    "text": "1.1 Summary stats\nTo start with, let’s get the number of species for each instance:\n# Get number of species in Ensembl Genomes\ninstances &lt;- c(\"fungi_mart\", \"plants_mart\", \"metazoa_mart\", \"protists_mart\")\nnspecies_ensemblgenomes &lt;- unlist(lapply(instances, function(x) {\n    return(nrow(listDatasets(useEnsemblGenomes(biomart = x))))\n}))\n\n# Get number of species in Ensembl\nnspecies_ensembl &lt;- nrow(listDatasets(useEnsembl(biomart = \"genes\")))\n\n# Combine summary stats onto a data frame\nnspecies_all &lt;- data.frame(\n    instance = c(gsub(\"_mart\", \"\", instances), \"ensembl\"),\n    n_genes = c(nspecies_ensemblgenomes, nspecies_ensembl)\n)\n\nnspecies_all\n\n  instance n_genes\n1    fungi      70\n2   plants     151\n3  metazoa     280\n4 protists      33\n5  ensembl     214",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Obtaining species trees for Ensembl instances</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#getting-species-metadata",
    "href": "chapters/chapter_01.html#getting-species-metadata",
    "title": "1  Obtaining species trees for Ensembl instances",
    "section": "1.2 Getting species metadata",
    "text": "1.2 Getting species metadata\nNow, let’s get species metadata for each Ensembl instance.\n\n# Metadata column names\ncol_names &lt;- c(\n    \"name\", \"species\", \"division\", \"taxonomy_id\", \"assembly\", \n    \"assembly_accession\", \"genebuild\", \"variation\", \"microarray\", \"pan_compara\",\n    \"peptide_compara\", \"genome_alignments\", \"other_alignments\", \"core_db\",\n    \"species_id\"\n)\n\nto_remove &lt;- c(\n    \"variation\", \"microarray\", \"pan_compara\", \"peptide_compara\", \n    \"genome_alignments\", \"other_alignments\", \"core_db\", \"species_id\"\n)\n\n# Ensembl Fungi\nmetadata_fungi &lt;- read_tsv(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/fungi/species_EnsemblFungi.txt\",\n    col_names = col_names, skip = 1, col_select = 1:15, show_col_types = FALSE\n) |&gt;\n    dplyr::filter(!startsWith(core_db, \"fungi_\")) |&gt;\n    dplyr::select(!any_of(to_remove)) |&gt;\n    as.data.frame()\n\nmetadata_fungi &lt;- cbind(\n    metadata_fungi,\n    classification(metadata_fungi$taxonomy_id, db = \"ncbi\") |&gt;\n        format_classification()\n)\n\n# Ensembl Plants\nmetadata_plants &lt;- read_tsv(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/plants/species_EnsemblPlants.txt\",\n    col_names = col_names, skip = 1, col_select = 1:15, show_col_types = FALSE\n) |&gt;\n    dplyr::filter(species != \"triticum_aestivum_kariega\") |&gt;\n    dplyr::select(!any_of(to_remove)) |&gt;\n    as.data.frame()\n\nmetadata_plants &lt;- cbind(\n    metadata_plants,\n    classification(metadata_plants$taxonomy_id, db = \"ncbi\") |&gt;\n        format_classification()\n)\n\n# Ensembl Metazoa\nmetadata_metazoa &lt;- read_tsv(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/metazoa/species_EnsemblMetazoa.txt\",\n    col_names = col_names, skip = 1, col_select = 1:15, show_col_types = FALSE\n) |&gt;\n    dplyr::filter(!startsWith(core_db, \"metazoa_\")) |&gt;\n    dplyr::select(!any_of(to_remove)) |&gt;\n    as.data.frame()\n\nmetadata_metazoa &lt;- cbind(\n    metadata_metazoa,\n    classification(metadata_metazoa$taxonomy_id, db = \"ncbi\") |&gt;\n        format_classification()\n)\n\n# Ensembl Protists\nmetadata_protists &lt;- read_tsv(\n    \"http://ftp.ebi.ac.uk/ensemblgenomes/pub/release-57/protists/species_EnsemblProtists.txt\",\n    col_names = col_names, skip = 1, col_select = 1:15, show_col_types = FALSE\n) |&gt;\n    dplyr::filter(!startsWith(core_db, \"protists_\")) |&gt;\n    dplyr::select(!any_of(to_remove)) |&gt;\n    as.data.frame()\n\nmetadata_protists &lt;- cbind(\n    metadata_protists,\n    classification(metadata_protists$taxonomy_id, db = \"ncbi\") |&gt;\n        format_classification()\n)\n\n# Ensembl\nmetadata_ensembl &lt;- read_tsv(\n    \"https://ftp.ensembl.org/pub/release-110/species_EnsemblVertebrates.txt\",\n    col_names = col_names, skip = 1, col_select = 1:15, show_col_types = FALSE\n) |&gt;\n    dplyr::select(!any_of(to_remove)) |&gt;\n    as.data.frame()\n\nmetadata_ensembl &lt;- cbind(\n    metadata_ensembl,\n    classification(metadata_ensembl$taxonomy_id, db = \"ncbi\") |&gt;\n        format_classification()\n)\n\n# Combining all metadata data frames into a list and saving it\nmetadata_all &lt;- list(\n    fungi = metadata_fungi,\n    plants = metadata_plants,\n    metazoa = metadata_metazoa,\n    protists = metadata_protists,\n    ensembl = metadata_ensembl\n)\n\nsave(\n    metadata_all, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"metadata_all.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Obtaining species trees for Ensembl instances</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#busco-guided-phylogeny-inference",
    "href": "chapters/chapter_01.html#busco-guided-phylogeny-inference",
    "title": "1  Obtaining species trees for Ensembl instances",
    "section": "1.3 BUSCO-guided phylogeny inference",
    "text": "1.3 BUSCO-guided phylogeny inference\nHere, for each Ensembl instance, we infer a species tree using the following workflow:\n\nRun BUSCO in protein mode with cogeqc, using translated sequences for primary transcripts as input;\nGet the sequences of the identified complete BUSCOs that are shared across all species;\nPerform a multiple sequence alignment for each BUSCO gene family.\nTrim the alignments to remove columns with &gt;50% of gaps.\nInfer a phylogeny with IQ-TREE2.\n\nTo start with, we will use the Bioconductor package Herper to create a Conda environment containing BUSCO and all its dependencies. Then, we will use this environment to run BUSCO from the R session.\n\n# Create Conda environment with BUSCO\nmy_miniconda &lt;- \"~/\"\n\nconda &lt;- install_CondaTools(\n    tools = \"busco==5.5.0\",\n    env = \"busco_env\",\n    pathToMiniConda = my_miniconda\n)\n\n\n1.3.1 Obtaining BUSCO sequences\nTo obtain sequences for BUSCO genes, we will run BUSCO in protein mode using the R/Bioconductor package cogeqc. Then, we will read the sequences for complete, single-copy BUSCOs, and keep only BUSCO genes that are shared by a certain % of the species. Ideally, this cut-off should be 100% of conservation (i.e., the BUSCO gene is found in all species), but it can be relaxed for some clades.\n\n1.3.1.1 Ensembl Fungi\nHere, we will obtain BUSCO genes for Ensembl Fungi species using the following parameters:\n\nLineage: eukaryota_odb10\nConservation: 100%\n\n\n# Download whole-genome protein sequences to a directory sequences\nbusco_fungi &lt;- file.path(\"~/Downloads/busco_fungi\")\nseq_fungi &lt;- file.path(busco_fungi, \"seqs\")\nif(!dir.exists(seq_fungi)) { dir.create(seq_fungi, recursive = TRUE) }\n\ndownload_filtered_proteomes(metadata_all$fungi, \"fungi\", seq_fungi)\n\n# Run BUSCO in `protein` mode\nwith_CondaEnv(\n    \"busco_env\",\n    cogeqc::run_busco(\n        sequence = seq_fungi, \n        outlabel = \"ensembl_fungi\",\n        mode = \"protein\",\n        lineage = \"eukaryota_odb10\",\n        outpath = busco_fungi,\n        threads = 3,\n        download_path = busco_fungi\n        \n    ),\n    pathToMiniConda = my_miniconda\n)\n\noutdir &lt;- file.path(busco_fungi, \"ensembl_fungi\")\nfungi_busco_seqs &lt;- read_busco_sequences(outdir, verbose = TRUE)\n\nSaving BUSCO sequences:\n\n# Save list of AAStringSet objects with conserved BUSCO sequences\nsave(\n    fungi_busco_seqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"busco_seqs\", \"fungi_busco_seqs.rda\")\n)\n\n\n\n1.3.1.2 Ensembl Plants\nHere, we will use the lineage data set eukaryota_odb10. We could use viridiplantae_odb10, but there are 3 Rhodophyta species (Chondrus crispus, Galdieria sulphuraria, and Cyanidioschyzon merolae). Because none of the BUSCO genes were shared by all species, we selected genes shared by &gt;60% of the species, and then manually selected BUSCO genes in a way that all species are included. This was required because some taxa (in particular Triticum species) had very few BUSCO genes.\n\n# Download whole-genome protein sequences to a directory sequences\nbusco_plants &lt;- file.path(\"~/Downloads/busco_plants\")\nseq_plants &lt;- file.path(busco_plants, \"seqs\")\nif(!dir.exists(seq_plants)) { dir.create(seq_plants, recursive = TRUE) }\n\ndownload_filtered_proteomes(metadata_all$plants, \"plants\", seq_plants)\n\n# Run BUSCO in `protein` mode\nwith_CondaEnv(\n    \"busco_env\",\n    cogeqc::run_busco(\n        sequence = seq_plants, \n        outlabel = \"ensemblplants\",\n        mode = \"protein\",\n        lineage = \"eukaryota_odb10\",\n        outpath = busco_plants,\n        threads = 4,\n        download_path = busco_plants\n        \n    ),\n    pathToMiniConda = my_miniconda\n)\n\n# Read sequences of BUSCOs preserved in &gt;=60% of the species\noutdir &lt;- file.path(busco_plants, \"ensemblplants\")\nplants_busco_seqs &lt;- read_busco_sequences(outdir, conservation_freq = 0.6)\n\n# Select 10 BUSCO genes so that all species are represented\nplants_busco_pav &lt;- get_busco_pav(plants_busco_seqs)\n\n#' The following code was used to manually select BUSCOs in a way that\n#' all species are represented\n\n#&gt; ht &lt;- ComplexHeatmap::Heatmap(plants_busco_pav)\n#&gt; ht &lt;- ComplexHeatmap::draw(ht)\n#&gt; InteractiveComplexHeatmap::htShiny(ht)\n\n\n# Create a vector of selected BUSCOs\nselected_buscos &lt;- c(\n    \"549762at2759\", \"1003258at2759\", \"1247641at2759\",\n    \"1200489at2759\", \"1398309at2759\", \"1346432at2759\",\n    \"1266231at2759\", \"1094121at2759\", \"1421503at2759\",\n    \"664730at2759\", \"1405073at2759\", \"450058at2759\",\n    \"865202at2759\", \"901894at2759\", \"1450538at2759\",\n    \"1284731at2759\"\n)\n\n# Subset sequences to keep only selected BUSCOs\nplants_busco_seqs &lt;- plants_busco_seqs[selected_buscos]\n\nSaving BUSCO sequences:\n\n# Save list of AAStringSet objects with conserved BUSCO sequences\nsave(\n    plants_busco_seqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"busco_seqs\", \"plants_busco_seqs.rda\")\n)\n\n\n\n1.3.1.3 Ensembl Protists\nHere, we will obtain BUSCO genes for Ensembl Protists species using the following parameters:\n\nLineage: eukaryota_odb10\nConservation: 100%\n\n\n# Download whole-genome protein sequences to a directory sequences\nbusco_protists &lt;- file.path(\"~/Downloads/busco_protists\")\nseq_protists &lt;- file.path(busco_protists, \"seqs\")\nif(!dir.exists(seq_protists)) { dir.create(seq_protists, recursive = TRUE) }\n\ndownload_filtered_proteomes(metadata_all$protists, \"protists\", seq_protists)\n\n# Run BUSCO in `protein` mode\nwith_CondaEnv(\n    \"busco_env\",\n    cogeqc::run_busco(\n        sequence = seq_protists, \n        outlabel = \"ensemblprotists\",\n        mode = \"protein\",\n        lineage = \"eukaryota_odb10\",\n        outpath = busco_protists,\n        threads = 4,\n        download_path = busco_protists\n        \n    ),\n    pathToMiniConda = my_miniconda\n)\n\n# Read sequences of BUSCOs preserved in &gt;=60% of the species\noutdir &lt;- file.path(busco_protists, \"ensemblprotists\")\nprotists_busco_seqs &lt;- read_busco_sequences(outdir, verbose = TRUE)\n\nSaving BUSCO sequences:\n\n# Save list of AAStringSet objects with conserved BUSCO sequences\nsave(\n    protists_busco_seqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"busco_seqs\", \"protists_busco_seqs.rda\")\n)\n\n\n\n1.3.1.4 Ensembl Metazoa\nFor the Metazoa instance, we used the metazoa_odb10 lineage data set.\n\n# Download whole-genome protein sequences to a directory sequences\nbusco_metazoa &lt;- file.path(\"~/Downloads/busco_metazoa\")\nseq_metazoa &lt;- file.path(busco_metazoa, \"seqs\")\nif(!dir.exists(seq_metazoa)) { dir.create(seq_metazoa, recursive = TRUE) }\n\ndownload_filtered_proteomes(metadata_all$metazoa, \"metazoa\", seq_metazoa)\n\n# Run BUSCO in `protein` mode\nwith_CondaEnv(\n    \"busco_env\",\n    cogeqc::run_busco(\n        sequence = seq_metazoa, \n        outlabel = \"ensemblmetazoa\",\n        mode = \"protein\",\n        lineage = \"metazoa_odb10\",\n        outpath = busco_metazoa,\n        threads = 4,\n        download_path = busco_metazoa\n        \n    ),\n    pathToMiniConda = my_miniconda\n)\n\n# Read sequences of BUSCOs preserved in &gt;=60% of the species\noutdir &lt;- file.path(busco_metazoa, \"ensemblmetazoa\")\nmetazoa_busco_seqs &lt;- read_busco_sequences(outdir, conservation_freq = 0.9)\n\n# Select 10 BUSCO genes so that all species are represented\nmetazoa_busco_pav &lt;- get_busco_pav(metazoa_busco_seqs)\n\n#' The following code was used to manually select BUSCOs in a way that\n#' all species are represented\n\n#&gt; ht &lt;- ComplexHeatmap::Heatmap(metazoa_busco_pav)\n#&gt; ht &lt;- ComplexHeatmap::draw(ht)\n#&gt; InteractiveComplexHeatmap::htShiny(ht)\n\n\n# Create a vector of selected BUSCOs\nselected_buscos &lt;- c(\n    \"351226at33208\", \"135294at33208\",\n    \"517525at33208\", \"501396at33208\",\n    \"464987at33208\", \"443518at33208\",\n    \"495100at33208\", \"335107at33208\",\n    \"454911at33208\", \"134492at33208\"\n)\n\n# Subset sequences to keep only selected BUSCOs\nmetazoa_busco_seqs &lt;- metazoa_busco_seqs[selected_buscos]\n\nSaving BUSCO sequences:\n\n# Save list of AAStringSet objects with conserved BUSCO sequences\nsave(\n    metazoa_busco_seqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"busco_seqs\", \"metazoa_busco_seqs.rda\")\n)\n\n\n\n1.3.1.5 Ensembl Vertebrates\nHere, because there are 3 non-vertebrate species (C. elegans, D. melanogaster, and S. cerevisiae), we will use the lineage data set eukaryota_odb10.\n\n# Download whole-genome protein sequences to a directory sequences\nbusco_vertebrates &lt;- file.path(\"~/Downloads/busco_vertebrates\")\nseq_vertebrates &lt;- file.path(busco_vertebrates, \"seqs\")\nif(!dir.exists(seq_vertebrates)) { dir.create(seq_vertebrates, recursive = TRUE) }\n\ndownload_filtered_proteomes(metadata_all$ensembl, \"ensembl\", seq_vertebrates)\n\n# Run BUSCO in `protein` mode\nwith_CondaEnv(\n    \"busco_env\",\n    cogeqc::run_busco(\n        sequence = seq_vertebrates, \n        outlabel = \"ensemblvertebrates\",\n        mode = \"protein\",\n        lineage = \"eukaryota_odb10\",\n        outpath = busco_vertebrates,\n        threads = 4,\n        download_path = busco_vertebrates\n        \n    ),\n    pathToMiniConda = my_miniconda\n)\n\n# Read sequences of BUSCOs preserved in &gt;=90% of the species\noutdir &lt;- file.path(busco_vertebrates, \"ensemblvertebrates\")\nvertebrates_busco_seqs &lt;- read_busco_sequences(outdir, conservation_freq = 0.9)\n\n# Select 10 BUSCO genes so that all species are represented\nvertebrates_busco_pav &lt;- get_busco_pav(vertebrates_busco_seqs)\n\n#' The following code was used to manually select BUSCOs in a way that\n#' all species are represented\n\n#&gt; ht &lt;- ComplexHeatmap::Heatmap(vertebrates_busco_pav)\n#&gt; ht &lt;- ComplexHeatmap::draw(ht)\n#&gt; InteractiveComplexHeatmap::htShiny(ht)\n\n\n# Create a vector of selected BUSCOs\nselected_buscos &lt;- c(\n    \"834694at2759\", \"551907at2759\",\n    \"491869at2759\", \"1085752at2759\",\n    \"801857at2759\", \"1398309at2759\",\n    \"176625at2759\", \"1324510at2759\",\n    \"1377237at2759\", \"1085752at2759\"\n)\n\n# Subset sequences to keep only selected BUSCOs\nvertebrates_busco_seqs &lt;- vertebrates_busco_seqs[selected_buscos]\n\nSaving BUSCO sequences:\n\n# Save list of AAStringSet objects with conserved BUSCO sequences\nsave(\n    vertebrates_busco_seqs, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"busco_seqs\", \"vertebrates_busco_seqs\")\n)\n\n\n\n\n1.3.2 Tree inference from BUSCO genes\nNow, we will infer species trees from MSAs for each family, and from a single concatenated MSA (when possible).\n\n1.3.2.1 Ensembl Fungi\nPerforming MSA with MAFFT and trimming the alignment:\n\n# Perform MSA with MAFFT\naln_fungi &lt;- align_sequences(busco_seqs_fungi, threads = 4)\n\n# Trim alignment to remove columns with &gt;50% of gaps\naln_fungi_trimmed &lt;- lapply(aln_fungi, trim_alignment, max_gap = 0.5)\n\nNow, let’s infer a species tree using IQ-TREE2.\n\noutgroup &lt;- \"aphanomyces.astaci,aphanomyces.invadans,globisporangium.ultimum\"\ntrees_fungi &lt;- infer_species_tree(aln_fungi_trimmed, outgroup, threads = 4)\n\nFinally, for comparative reasons, we will also infer a single tree from a concatenated multiple sequence alignment.\n\n# Concatenate alignments\naln_fungi_conc &lt;- Reduce(xscat, aln_fungi_trimmed)\nnames(aln_fungi_conc) &lt;- names(aln_fungi_trimmed[[1]])\n\n# Infer tree from concatenated alignment\ntree_fungi_conc &lt;- infer_species_tree(\n    list(conc = aln_fungi_conc), \n    outgroup, threads = 4\n)\n\nCombining the trees and saving them:\n\n# Combine trees\nfungi_busco_trees &lt;- c(\n    tree_fungi_conc, trees_fungi\n)\n\nsave(\n    fungi_busco_trees, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"trees\", \"fungi_busco_trees.rda\")\n)\n\n\n\n1.3.2.2 Ensembl Plants\nHere, because no BUSCO gene is present in all species, we will only infer a single tree from concatenated alignments.\n\n# Perform MSA with MAFFT\naln_plants &lt;- align_sequences(plants_busco_seqs, threads = 4)\n\n# Trim alignment to remove columns with &gt;50% of gaps\naln_plants_trimmed &lt;- lapply(aln_plants, trim_alignment, max_gap = 0.5)\n\nFinally, let’s infer a species tree from a concatenated alignment. As outgroups, we’re going to use Chondrus crispus, Galdieria sulphuraria, and Cyanidioschyzon merolae.\n\noutgroup &lt;- \"chondrus.crispus,galdieria.sulphuraria,cyanidioschyzon.merolae\"\n\n# Concatenate alignments\naln_plants_conc &lt;- concatenate_alignments(aln_plants_trimmed)\n\n# Infer tree from concatenated alignment\nplants_busco_trees &lt;- infer_species_tree(\n    list(conc = aln_plants_conc), \n    outgroup, threads = 4\n)\n\n# Save tree\nsave(\n    plants_busco_trees, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"trees\", \"plants_busco_trees.rda\")\n)\n\n\n\n1.3.2.3 Ensembl Protists\nFor this instance, two BUSCO genes were conserved across all species, so we will infer trees for each family + a tree from a concatenated alignment.\n\n# Perform MSA with MAFFT\naln_protists &lt;- align_sequences(protists_busco_seqs, threads = 4)\n\n# Trim alignment to remove columns with &gt;50% of gaps\naln_protists_trimmed &lt;- lapply(aln_protists, trim_alignment, max_gap = 0.5)\n\nNow, let’s infer species trees. As outgroup, we will use Fornicata (Giardia lamblia) based on this paper.\n\noutgroup &lt;- \"giardia.lamblia\"\n\n# Path 1: a tree per BUSCO gene\nprotists_trees1 &lt;- infer_species_tree(\n    aln_protists_trimmed, outgroup, threads = 4\n)\n\n# Path 2: a single tree from a concatenated alignment\nprotists_trees2 &lt;- infer_species_tree(\n    list(conc = concatenate_alignments(aln_protists_trimmed)),\n    outgroup, threads = 6\n)\n\n\n# Combine trees and save them\nprotists_busco_trees &lt;- c(protists_trees1, protists_trees2)\n\nsave(\n    protists_busco_trees, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"trees\", \"protists_busco_trees.rda\")\n)\n\nHowever, even though we specified Giardia lamblia, IQ-TREE2 placed it as an ingroup. This suggests that, based on our data (BUSCO sequences), Giardia lamblia may not be a good outgroup.\nSince protists are not actually a real phylogenetic group (not monophyletic), instead of digging deeper into the real phylogeny of the group and searching for a proper outgroup, we will simply use this phylogeny but acknowledging that it may not be completely accurate.\n\n\n1.3.2.4 Ensembl Metazoa\nFor this instance, two BUSCO genes were conserved across all species, so we will infer trees for each family + a tree from a concatenated alignment.\n\n# Perform MSA with MAFFT\naln_metazoa &lt;- align_sequences(metazoa_busco_seqs, threads = 4)\n\n# Trim alignment to remove columns with &gt;50% of gaps\naln_metazoa_trimmed &lt;- lapply(aln_metazoa, trim_alignment, max_gap = 0.5)\n\nNow, let’s infer a species tree. As outgroup, we will use the ctenophore Mnemiopsis leidyi.\n\noutgroup &lt;- \"mnemiopsis.leidyi\"\n\n# Get a single tree from a concatenated alignment\nmetazoa_busco_trees &lt;- infer_species_tree(\n    list(conc = concatenate_alignments(aln_metazoa_trimmed)),\n    outgroup, threads = 6\n)\n\n# Save tree\nsave(\n    metazoa_busco_trees, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"trees\", \"metazoa_busco_trees.rda\")\n)\n\n\n\n1.3.2.5 Ensembl Vertebrates\nFor this instance, no BUSCO gene was conserved in all species. Thus, we will infer a single tree from a concatenated alignment of ten representative BUSCOs.\n\n# Perform MSA with MAFFT\naln_vertebrates &lt;- align_sequences(vertebrates_busco_seqs, threads = 4)\n\n# Trim alignment to remove columns with &gt;50% of gaps\naln_vertebrates_trimmed &lt;- lapply(aln_vertebrates, trim_alignment, max_gap = 0.5)\n\nNow, let’s infer a species tree. As outgroup, we will use the yeast Saccharomyces cerevisiae.\n\noutgroup &lt;- \"saccharomyces.cerevisiae\"\n\n# Get a single tree from a concatenated alignment\nvertebrates_busco_trees &lt;- infer_species_tree(\n    list(conc = concatenate_alignments(aln_vertebrates_trimmed)),\n    outgroup, threads = 6\n)\n\n# Save tree\nsave(\n    vertebrates_busco_trees, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"trees\", \"vertebrates_busco_trees.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Obtaining species trees for Ensembl instances</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#obtaining-busco-scores",
    "href": "chapters/chapter_01.html#obtaining-busco-scores",
    "title": "1  Obtaining species trees for Ensembl instances",
    "section": "1.4 Obtaining BUSCO scores",
    "text": "1.4 Obtaining BUSCO scores\nFinally, since we ran BUSCO to obtain single-copy gene families, we will also use BUSCO’s output to explore gene space completeness across species in Ensembl instances.\n\n# Read BUSCO completeness stats\n## Ensembl Fungi\nfungi_busco_scores &lt;- read_busco(\n    \"~/Downloads/busco_fungi/ensembl_fungi\"\n)\n\n## Ensembl Plants\nplants_busco_scores &lt;- read_busco(\n    \"~/Downloads/busco_plants/ensemblplants\"\n)\n\n## Ensembl Protists\nprotists_busco_scores &lt;- read_busco(\n    \"~/Downloads/busco_protists/ensemblprotists\"\n)\n\n## Ensembl Metazoa\nmetazoa_busco_scores &lt;- read_busco(\n    \"~/Downloads/busco_metazoa/ensemblmetazoa\"\n)\n\n## Ensembl Vertebrates\nvertebrates_busco_scores &lt;- read_busco(\n    \"~/Downloads/busco_vertebrates/ensemblvertebrates\"\n)\n\n# Save files\nsave(\n    fungi_busco_scores, compress = \"xz\",\n    file = here(\n        \"products\", \"result_files\", \"busco_scores\", \"fungi_busco_scores.rda\"\n    )\n)\n\nsave(\n    plants_busco_scores, compress = \"xz\",\n    file = here(\n        \"products\", \"result_files\", \"busco_scores\", \"plants_busco_scores.rda\"\n    )\n)\n\nsave(\n    protists_busco_scores, compress = \"xz\",\n    file = here(\n        \"products\", \"result_files\", \"busco_scores\", \"protists_busco_scores.rda\"\n    )\n)\n\nsave(\n    metazoa_busco_scores, compress = \"xz\",\n    file = here(\n        \"products\", \"result_files\", \"busco_scores\", \"metazoa_busco_scores.rda\"\n    )\n)\n\nsave(\n    vertebrates_busco_scores, compress = \"xz\",\n    file = here(\n        \"products\", \"result_files\", \"busco_scores\", \"vertebrates_busco_scores.rda\"\n    )\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Obtaining species trees for Ensembl instances</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#session-info",
    "href": "chapters/chapter_01.html#session-info",
    "title": "1  Obtaining species trees for Ensembl instances",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-12\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package          * version   date (UTC) lib source\n AnnotationDbi      1.64.1    2023-11-03 [1] Bioconductor\n ape                5.7-1     2023-03-13 [1] CRAN (R 4.3.2)\n aplot              0.2.2     2023-10-06 [1] CRAN (R 4.3.2)\n beeswarm           0.4.0     2021-06-01 [1] CRAN (R 4.3.2)\n Biobase            2.62.0    2023-10-24 [1] Bioconductor\n BiocFileCache      2.10.1    2023-10-26 [1] Bioconductor\n BiocGenerics     * 0.48.1    2023-11-01 [1] Bioconductor\n biomaRt          * 2.58.0    2023-10-24 [1] Bioconductor\n Biostrings       * 2.70.1    2023-10-25 [1] Bioconductor\n bit                4.0.5     2022-11-15 [1] CRAN (R 4.3.2)\n bit64              4.0.5     2020-08-30 [1] CRAN (R 4.3.2)\n bitops             1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n blob               1.2.4     2023-03-17 [1] CRAN (R 4.3.2)\n bold               1.3.0     2023-05-02 [1] CRAN (R 4.3.2)\n cachem             1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n cli                3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n codetools          0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n cogeqc           * 1.6.0     2023-10-24 [1] Bioconductor\n colorspace         2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n conditionz         0.1.0     2019-04-24 [1] CRAN (R 4.3.2)\n crayon             1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n crul               1.4.0     2023-05-17 [1] CRAN (R 4.3.2)\n curl               5.2.0     2023-12-08 [1] CRAN (R 4.3.2)\n data.table         1.14.10   2023-12-08 [1] CRAN (R 4.3.2)\n DBI                1.1.3     2022-06-18 [1] CRAN (R 4.3.2)\n dbplyr             2.4.0     2023-10-26 [1] CRAN (R 4.3.2)\n digest             0.6.33    2023-07-07 [1] CRAN (R 4.3.2)\n dplyr            * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n evaluate           0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi              1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n fastmap            1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n filelock           1.0.3     2023-12-11 [1] CRAN (R 4.3.2)\n forcats          * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach            1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n fs                 1.6.3     2023-07-20 [1] CRAN (R 4.3.2)\n generics           0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb     * 1.38.2    2023-12-13 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData   1.2.11    2023-12-21 [1] Bioconductor\n ggbeeswarm         0.7.2     2023-04-29 [1] CRAN (R 4.3.2)\n ggfun              0.1.3     2023-09-15 [1] CRAN (R 4.3.2)\n ggplot2          * 3.4.4     2023-10-12 [1] CRAN (R 4.3.2)\n ggplotify          0.1.2     2023-08-09 [1] CRAN (R 4.3.2)\n ggtree             3.10.0    2023-10-24 [1] Bioconductor\n glue               1.6.2     2022-02-24 [1] CRAN (R 4.3.2)\n gridGraphics       0.5-1     2020-12-13 [1] CRAN (R 4.3.2)\n gtable             0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here             * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n Herper           * 1.10.1    2024-02-08 [1] Github (RockefellerUniversity/Herper@ae37f3d)\n hms                1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools          0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets        1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n httpcode           0.3.0     2020-04-10 [1] CRAN (R 4.3.2)\n httr               1.4.7     2023-08-15 [1] CRAN (R 4.3.2)\n igraph             2.0.1.1   2024-01-30 [1] CRAN (R 4.3.2)\n IRanges          * 2.36.0    2023-10-24 [1] Bioconductor\n iterators          1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite           1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST           1.42.0    2023-10-24 [1] Bioconductor\n knitr              1.45      2023-10-30 [1] CRAN (R 4.3.2)\n lattice            0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lazyeval           0.2.2     2019-03-15 [1] CRAN (R 4.3.2)\n lifecycle          1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n lubridate        * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magrittr           2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n Matrix             1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n memoise            2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n munsell            0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n nlme               3.1-163   2023-08-09 [4] CRAN (R 4.3.1)\n patchwork          1.2.0     2024-01-08 [1] CRAN (R 4.3.2)\n pillar             1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig          2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n plyr               1.8.9     2023-10-02 [1] CRAN (R 4.3.2)\n png                0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits        1.2.0     2023-09-24 [1] CRAN (R 4.3.2)\n progress           1.2.3     2023-12-06 [1] CRAN (R 4.3.2)\n purrr            * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                 2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs           0.3.3     2021-01-31 [1] CRAN (R 4.3.2)\n Rcpp               1.0.11    2023-07-06 [1] CRAN (R 4.3.2)\n RCurl              1.98-1.13 2023-11-02 [1] CRAN (R 4.3.2)\n readr            * 2.1.4     2023-02-10 [1] CRAN (R 4.3.2)\n reshape2           1.4.4     2020-04-09 [1] CRAN (R 4.3.2)\n reticulate       * 1.35.0    2024-01-31 [1] CRAN (R 4.3.2)\n rjson              0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang              1.1.2     2023-11-04 [1] CRAN (R 4.3.2)\n rmarkdown          2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot          2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n RSQLite            2.3.4     2023-12-08 [1] CRAN (R 4.3.2)\n rstudioapi         0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n S4Vectors        * 0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales             1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo        1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n stringi            1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr          * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n taxize           * 0.9.100   2022-04-22 [1] CRAN (R 4.3.2)\n tibble           * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr            * 1.3.0     2023-01-24 [1] CRAN (R 4.3.2)\n tidyselect         1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidytree           0.4.6     2023-12-12 [1] CRAN (R 4.3.2)\n tidyverse        * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange         0.2.0     2023-01-11 [1] CRAN (R 4.3.2)\n treeio             1.26.0    2023-10-24 [1] Bioconductor\n tzdb               0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8               1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n uuid               1.1-1     2023-08-17 [1] CRAN (R 4.3.2)\n vctrs              0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n vipor              0.4.7     2023-12-18 [1] CRAN (R 4.3.2)\n withr              2.5.2     2023-10-30 [1] CRAN (R 4.3.2)\n xfun               0.41      2023-11-01 [1] CRAN (R 4.3.2)\n XML                3.99-0.16 2023-11-29 [1] CRAN (R 4.3.2)\n xml2               1.3.6     2023-12-04 [1] CRAN (R 4.3.2)\n XVector          * 0.42.0    2023-10-24 [1] Bioconductor\n yaml               2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n yulab.utils        0.1.2     2023-12-22 [1] CRAN (R 4.3.2)\n zlibbioc           1.48.0    2023-10-24 [1] Bioconductor\n zoo                1.8-12    2023-04-13 [1] CRAN (R 4.3.2)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Obtaining species trees for Ensembl instances</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html",
    "href": "chapters/chapter_02.html",
    "title": "2  Identification and classification of duplicated genes in Ensembl and Ensembl Genomes",
    "section": "",
    "text": "2.1 Data loading: species trees and metadata\nHere, we will load the data frames of species metadata and phylo objects with species trees for each Ensembl instance.\n# Load metadata\nload(here(\"products\", \"result_files\", \"metadata_all.rda\"))\nnames(metadata_all)\n\n[1] \"fungi\"    \"plants\"   \"metazoa\"  \"protists\" \"ensembl\" \n\n# Load trees\nload(here(\"products\", \"result_files\", \"trees\", \"fungi_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"plants_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"metazoa_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"vertebrates_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"protists_busco_trees.rda\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Identification and classification of duplicated genes in Ensembl and Ensembl Genomes</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#identification-and-classification-of-duplicated-genes-in-ensembl-and-ensembl-genomes",
    "href": "chapters/chapter_02.html#identification-and-classification-of-duplicated-genes-in-ensembl-and-ensembl-genomes",
    "title": "2  Identification and classification of duplicated genes in Ensembl and Ensembl Genomes",
    "section": "2.2 Identification and classification of duplicated genes in Ensembl and Ensembl Genomes",
    "text": "2.2 Identification and classification of duplicated genes in Ensembl and Ensembl Genomes\nNow, let’s use doubletrouble to identify duplicated genes and classify them using the Ensembl and Ensembl Genomes data sets. Here, to avoid code repetition and optimize memory usage, we will use the wrapper function ensembl2duplicates() (in the file utils.R). For each species in the metadata data frame, this function:\n\nRetrieves whole-genome protein sequences (AAStringSet) and gene annotation (GRanges) from an Ensembl instance;\nFilters the AAStringSet object to include only the longest protein for each gene (i.e., the translated sequence of the primary transcript);\nProcesses the sequences and annotation with syntenet::process_input();\nIdentifies the paranome with syntenet::run_diamond() + identifies orthologs between the query species and an outgroup (optional);\nClassifies paralogs by duplication modes.\n\n\n2.2.1 Ensembl Fungi\nFirst, let’s create a data frame with species and their outgroups. Here, we will use the basidiomycete Cryptococcus neoformans as outgroup for Ascomycota species, and the oomycete Aphanomyces astaci as outgroup for Basidiomycota species.\n\ncol_dir &lt;- here(\"products\", \"result_files\", \"collinearity\", \"fungi\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Create data frame of query species and outgroup\nfungi_outgroups &lt;- metadata_all$fungi |&gt;\n    filter(phylum != \"Oomycota\") |&gt;\n    mutate(\n        query = species,\n        outgroup = case_when(\n            phylum == \"Ascomycota\" ~ \"cryptococcus_neoformans\",\n            TRUE ~ \"aphanomyces_astaci\"\n        )\n    ) |&gt;\n    select(query, outgroup)\n\n# Identifying and classifying paralogs\nfungi_duplicates &lt;- ensembl2duplicates(\n    metadata_all$fungi, ensembl = \"fungi\", \n    outgroups = fungi_outgroups,\n    collinearity_dir = col_dir\n)\n\n# Classify genes into unique duplication modes\nfungi_duplicates_unique &lt;- classify_genes(fungi_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    fungi_duplicates,\n    file = here(\"products\", \"result_files\", \"fungi_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    fungi_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"fungi_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n\n\n\n2.2.2 Ensembl Protists\nSince protists are not a real (i.e., monophyletic) group, defining an outgroup species is very problematic. For this reason, we will classify duplicates using the standard classification scheme here.\n\ncol_dir &lt;- here(\"products\", \"result_files\", \"collinearity\", \"protists\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nprotists_duplicates &lt;- ensembl2duplicates(\n    metadata_all$protists, ensembl = \"protists\", collinearity_dir = col_dir\n)\n\n# Classify genes into unique duplication modes\nprotists_duplicates_unique &lt;- classify_genes(protists_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    protists_duplicates,\n    file = here(\"products\", \"result_files\", \"protists_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    protists_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"protists_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n\n\n\n2.2.3 Ensembl Plants\nHere, we will use different outgroups for different branches of the tree. The clades and outgroups are:\n\nAngiosperms: Amborella trichopoda as outgroup.\nAmborella trichopoda and Nymphaea colorata: Chara braunii as outgroup.\nSelaginella moellendorffii, Chara braunii, Marchantia polymorpha, Physcomitrium patens: Chlamydomonas reinhardtii as outgroup.\nChlamydomonas reinhardtii and Ostreococcus lucimarinus: Galdieria sulphuraria as outgroup\nRhodophyta algae: no outgroup.\n\n\n# Create data frame of query species and outgroup\nangiosperms &lt;- metadata_all$plants |&gt;\n    filter(\n        phylum == \"Streptophyta\",\n        !order %in% c(\n            \"Charales\", \"Selaginellales\", \"Funariales\", \n            \"Marchantiales\", \"Nymphaeales\"\n        )\n    ) |&gt;\n    pull(species)\n\nana &lt;- c(\"amborella_trichopoda\", \"nymphaea_colorata\")\nbryophytes &lt;- c(\n    \"selaginella_moellendorffii\", \"chara_braunii\", \n    \"marchantia_polymorpha\", \"physcomitrium_patens\"\n)\nchlorophyta &lt;- c(\"chlamydomonas_reinhardtii\", \"ostreococcus_lucimarinus\")\n\nplants_outgroups &lt;- metadata_all$plants |&gt;\n    filter(phylum != \"Rhodophyta\") |&gt;\n    mutate(\n        query = species,\n        outgroup = case_when(\n            species %in% angiosperms ~ \"amborella_trichopoda\",\n            species %in% ana ~ \"chara_braunii\",\n            species %in% bryophytes ~ \"chlamydomonas_reinhardtii\",\n            species %in% chlorophyta ~ \"galdieria_sulphuraria\"\n        )\n    ) |&gt;\n    select(query, outgroup)\n\nIdentifying and classifying duplicates:\n\ncol_dir &lt;- here(\"products\", \"result_files\", \"collinearity\", \"plants\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nplants_duplicates &lt;- ensembl2duplicates(\n    metadata_all$plants, ensembl = \"plants\", \n    outgroups = plants_outgroups, \n    collinearity_dir = col_dir, \n    threads = 4\n)\n\n# Classify genes into unique duplication modes\nplants_duplicates_unique &lt;- classify_genes(plants_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    plants_duplicates,\n    file = here(\"products\", \"result_files\", \"plants_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    plants_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"plants_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n\n\n\n2.2.4 Ensembl Metazoa\nHere, we will use different outgroups for different branches of the tree. The clades and outgroups are:\n\nArthropoda: Hypsibius exemplaris (Tardigrada) as outgroup.\nTardigrada, Acanthocephala, and Rotifera: Brugia malayi (Nematoda) as outgroup.\nNematoda: Priapulus caudatus (Priapulida) as outgroup\nPriapulida, Echinodermata, Chordata, and Hemichordata: Hofstenia miamia (Xenacoelomorpha) as outgroup.\nXenacoelomorpha: Actinia tenebrosa (Cnidaria) as outgroup.\nCnidaria and Placozoa: Amphimedon queenslandica (Porifera) as outgroup.\nPorifera: Mnemiopsis leidyi (Ctenophora) as outgroup.\nBrachiopoda: Haliotis rufescens (Mollusca) as outgroup.\nMollusca, Annelida, and Platyhelminthes: Adineta vaga (Rotifera) as outgroup.\n\n\n# Create data frame of query species and outgroup\nby_phylum &lt;- function(df, taxon) {\n    return(\n        df |&gt; \n            dplyr::filter(phylum == taxon) |&gt; \n            dplyr::pull(species)\n    )\n}\n\narthropoda &lt;- by_phylum(metadata_all$metazoa, \"Arthropoda\")\ntardigrada &lt;- by_phylum(metadata_all$metazoa, \"Tardigrada\")\nnematoda &lt;- by_phylum(metadata_all$metazoa, \"Nematoda\")\npriapulida &lt;- by_phylum(metadata_all$metazoa, \"Priapulida\")\nxenacoelomorpha &lt;- by_phylum(metadata_all$metazoa, \"Xenacoelomorpha\")\ncnidaria &lt;- by_phylum(metadata_all$metazoa, \"Cnidaria\")\nplacozoa &lt;- by_phylum(metadata_all$metazoa, \"Placozoa\")\nporifera &lt;- by_phylum(metadata_all$metazoa, \"Porifera\")\nbrachiopoda &lt;- by_phylum(metadata_all$metazoa, \"Brachiopoda\")\nmollusca &lt;- by_phylum(metadata_all$metazoa, \"Mollusca\")\nechinodermata &lt;- by_phylum(metadata_all$metazoa, \"Echinodermata\")\nannelida &lt;- by_phylum(metadata_all$metazoa, \"Annelida\")\nplatyhelminthes &lt;- by_phylum(metadata_all$metazoa, \"Platyhelminthes\")\nacanthocephala &lt;- by_phylum(metadata_all$metazoa, \"Acanthocephala\")\nchordata &lt;- by_phylum(metadata_all$metazoa, \"Chordata\")\nhemichordata &lt;- by_phylum(metadata_all$metazoa, \"Hemichordata\")\nrotifera &lt;- by_phylum(metadata_all$metazoa, \"Rotifera\")\n\nmetazoa_outgroups &lt;- metadata_all$metazoa |&gt;\n    filter(phylum != \"Ctenophora\") |&gt;\n    mutate(\n        query = species,\n        outgroup = case_when(\n            species %in% arthropoda ~ \"hypsibius_exemplaris_gca002082055v1\",\n            species %in% c(tardigrada, acanthocephala, rotifera) ~ \"brugia_malayi\",\n            species %in% nematoda ~ \"priapulus_caudatus_gca000485595v2\",\n            \n            species %in% c(priapulida, echinodermata, chordata, hemichordata) ~\n                \"hofstenia_miamia\",\n            species %in% xenacoelomorpha ~ \"actinia_tenebrosa_gca009602425v1\",\n            species %in% c(cnidaria, placozoa) ~\n                \"amphimedon_queenslandica_gca000090795v2rs\",\n            species %in% porifera ~ \"mnemiopsis_leidyi\",\n            species %in% brachiopoda ~ \"haliotis_rufescens_gca023055435v1rs\",\n            species %in% c(mollusca, annelida, platyhelminthes) ~ \"adineta_vaga\"\n        )\n    ) |&gt;\n    select(query, outgroup)\n\nIdentifying and classifying duplicates:\n\ncol_dir &lt;- here(\"products\", \"result_files\", \"collinearity\", \"metazoa\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nmetazoa_duplicates &lt;- ensembl2duplicates(\n    metadata = metadata_all$metazoa, \n    ensembl = \"metazoa\", \n    outgroups = metazoa_outgroups, \n    collinearity_dir = col_dir, \n    threads = 4\n)\n\n# Classify genes into unique duplication modes\nmetazoa_duplicates_unique &lt;- classify_genes(metazoa_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    metazoa_duplicates,\n    file = here(\"products\", \"result_files\", \"metazoa_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    metazoa_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"metazoa_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n\n\n\n2.2.5 Ensembl (Vertebrates)\nHere, we will use the following outgroups per taxa:\n\nAmniota: Xenopus tropicalis (Amphibia) as outgroup;\nAmphibia: Latimeria chalumnae (West Indian Ocean coelacanth)\nAll bony and cartilaginous fish: Eptatretus burgeri (hagfish, Agnatha)\nAgnatha: Ciona intestinalis (Tunicata)\n\n\n# Create a data frame of species and outgroups\namniota &lt;- metadata_all$ensembl |&gt;\n    filter(\n        class %in% c(\"Aves\", \"Mammalia\", \"Lepidosauria\") | \n            order %in% c(\"Testudines\", \"Crocodylia\")\n    ) |&gt;\n    pull(species)\n\namphibia &lt;- metadata_all$ensembl |&gt;\n    filter(class == \"Amphibia\") |&gt; \n    pull(species)\n\nfish &lt;- metadata_all$ensembl |&gt;\n    filter(\n        class %in% c(\"Actinopteri\", \"Chondrichthyes\", \"Cladistia\") | \n            order == \"Coelacanthiformes\"\n    ) |&gt;\n    pull(species)\n\nagnatha &lt;- metadata_all$ensembl |&gt;\n    filter(\n        class %in% c(\"Myxini\", \"Hyperoartia\")\n    ) |&gt;\n    pull(species)\n\nensembl_outgroups &lt;- metadata_all$ensembl |&gt;\n    filter(!phylum %in% c(\"Nematoda\", \"Arthropoda\", \"Ascomycota\")) |&gt;\n    mutate(\n        query = species,\n        outgroup = case_when(\n            species %in% amniota ~ \"xenopus_tropicalis\",\n            species %in% amphibia ~ \"latimeria_chalumnae\",\n            species %in% fish ~ \"eptatretus_burgeri\",\n            species %in% agnatha ~ \"ciona_intestinalis\"\n        )\n    ) |&gt;\n    select(query, outgroup) |&gt;\n    filter(!is.na(outgroup))\n\nIdentifying and classifying duplicates:\n\ncol_dir &lt;- here(\"products\", \"result_files\", \"collinearity\", \"vertebrates\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nvertebrates_duplicates &lt;- ensembl2duplicates(\n    meta, \n    ensembl = \"ensembl\", \n    outgroups = ensembl_outgroups, \n    collinearity_dir = col_dir, \n    tsv_dir = \"~/Documents/vertebrates_duplicates\", # delete later\n    threads = 4\n)\n\n# Classify genes into unique duplication modes\nvertebrates_duplicates_unique &lt;- classify_genes(vertebrates_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    vertebrates_duplicates,\n    file = here(\"products\", \"result_files\", \"vertebrates_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    vertebrates_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"vertebrates_duplicates_unique.rda\"),\n    compress = \"xz\"\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Identification and classification of duplicated genes in Ensembl and Ensembl Genomes</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#session-info",
    "href": "chapters/chapter_02.html#session-info",
    "title": "2  Identification and classification of duplicated genes in Ensembl and Ensembl Genomes",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-12\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n ade4                   1.7-22    2023-02-06 [1] CRAN (R 4.3.2)\n AnnotationDbi          1.64.1    2023-11-03 [1] Bioconductor\n ape                    5.7-1     2023-03-13 [1] CRAN (R 4.3.2)\n Biobase                2.62.0    2023-10-24 [1] Bioconductor\n BiocFileCache          2.10.1    2023-10-26 [1] Bioconductor\n BiocGenerics           0.48.1    2023-11-01 [1] Bioconductor\n BiocIO                 1.12.0    2023-10-24 [1] Bioconductor\n BiocManager            1.30.22   2023-08-08 [1] CRAN (R 4.3.2)\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n BiocStyle              2.30.0    2023-10-24 [1] Bioconductor\n biomaRt              * 2.58.0    2023-10-24 [1] Bioconductor\n Biostrings             2.70.1    2023-10-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.2)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.2)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n curl                   5.2.0     2023-12-08 [1] CRAN (R 4.3.2)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.2)\n dbplyr                 2.4.0     2023-10-26 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n doubletrouble        * 1.3.4     2024-02-05 [1] Bioconductor\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n filelock               1.0.3     2023-12-11 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb           1.38.2    2023-12-13 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicAlignments      1.38.0    2023-10-24 [1] Bioconductor\n GenomicFeatures        1.54.1    2023-10-29 [1] Bioconductor\n GenomicRanges          1.54.1    2023-10-29 [1] Bioconductor\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4     2023-10-12 [1] CRAN (R 4.3.2)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n httr                   1.4.7     2023-08-15 [1] CRAN (R 4.3.2)\n igraph                 2.0.1.1   2024-01-30 [1] CRAN (R 4.3.2)\n intergraph             2.0-3     2023-08-20 [1] CRAN (R 4.3.2)\n IRanges                2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST               1.42.0    2023-10-24 [1] Bioconductor\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n MASS                   7.3-60    2023-05-04 [4] CRAN (R 4.3.1)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics         1.14.0    2023-10-24 [1] Bioconductor\n matrixStats            1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n mclust                 6.0.1     2023-11-15 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n MSA2dist               1.6.0     2023-10-24 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n network                1.18.2    2023-12-05 [1] CRAN (R 4.3.2)\n networkD3              0.4       2017-03-18 [1] CRAN (R 4.3.2)\n nlme                   3.1-163   2023-08-09 [4] CRAN (R 4.3.1)\n pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits            1.2.0     2023-09-24 [1] CRAN (R 4.3.2)\n progress               1.2.3     2023-12-06 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.11    2023-07-06 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.13 2023-11-02 [1] CRAN (R 4.3.2)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.2)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.2     2023-11-04 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n Rsamtools              2.18.0    2023-10-24 [1] Bioconductor\n RSQLite                2.3.4     2023-12-08 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n rtracklayer            1.62.0    2023-10-24 [1] Bioconductor\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors              0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n seqinr                 4.2-36    2023-12-08 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n SparseArray            1.2.2     2023-11-07 [1] Bioconductor\n statnet.common         4.9.0     2023-05-24 [1] CRAN (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment   1.32.0    2023-10-24 [1] Bioconductor\n syntenet             * 1.4.0     2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  2.5.2     2023-10-30 [1] CRAN (R 4.3.2)\n xfun                   0.41      2023-11-01 [1] CRAN (R 4.3.2)\n XML                    3.99-0.16 2023-11-29 [1] CRAN (R 4.3.2)\n xml2                   1.3.6     2023-12-04 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Identification and classification of duplicated genes in Ensembl and Ensembl Genomes</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_03.html",
    "href": "chapters/chapter_03.html",
    "title": "3  Calculating substitution rates for selected Ensembl genomes",
    "section": "",
    "text": "3.1 Data loading\nHere, we will load the data frames of species metadata and the lists of duplicated gene pairs for each Ensembl instance.\n# Load metadata\nload(here(\"products\", \"result_files\", \"metadata_all.rda\"))\n\n# Load duplicates\nload(here(\"products\", \"result_files\", \"fungi_duplicates.rda\"))\nload(here(\"products\", \"result_files\", \"plants_duplicates.rda\"))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Calculating substitution rates for selected Ensembl genomes</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_03.html#calculating-substitution-rates",
    "href": "chapters/chapter_03.html#calculating-substitution-rates",
    "title": "3  Calculating substitution rates for selected Ensembl genomes",
    "section": "3.2 Calculating substitution rates",
    "text": "3.2 Calculating substitution rates\nNext, we will calculate substitution rates (\\(K_a\\), \\(K_s\\), and \\(K_a/K_s\\)) for duplicate pairs in all selected species, namely:\n\nThree fungi species (Saccharomyces cerevisiae, Candida glabrata, and Schizosaccharomyces pombe).\nFour legume species (Glycine max, Phaseolus vulgaris, Vitis vinifera, Selaginella moellendorffii).\n\n\n# Fungi - S. cerevisiae, Candida glabrata, and Schizosaccharomyces pombe\n## Download CDS\nselected_fungi &lt;- c(\n    \"saccharomyces_cerevisiae\", \"candida_glabrata\", \"schizosaccharomyces_pombe\"\n)\nfungi_cds &lt;- get_cds_ensembl(selected_fungi, ensembl = \"fungi\")\n\n## Calculate substitution rates\nfungi_kaks &lt;- pairs2kaks(\n    gene_pairs_list = fungi_duplicates[selected_fungi],\n    cds = fungi_cds,\n    bp_param = BiocParallel::SnowParam(workers = 8)\n)\n\n# Plants - Glycine max, Phaseolus vulgaris, Vitis vinifera, and Selaginella moellendorffii\n## Download CDS\nselected_plants &lt;- c(\n    \"glycine_max\", \"phaseolus_vulgaris\", \"vitis_vinifera\", \n    \"selaginella_moellendorffii\"\n)\n\nplants_cds &lt;- get_cds_ensembl(selected_plants, ensembl = \"plants\")\n\n## Calculate substitution rates\nplants_duplicates &lt;- plants_duplicates[selected_plants]\n\nplants_kaks &lt;- pairs2kaks(\n    gene_pairs_list = plants_duplicates,\n    cds = plants_cds,\n    bp_param = BiocParallel::SnowParam(workers = 8)\n)\n\nSaving objects as .rda files:\n\nsave(\n    fungi_kaks, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"fungi_kaks.rda\")\n)\n\nsave(\n    plants_kaks, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"plants_kaks.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Calculating substitution rates for selected Ensembl genomes</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_03.html#session-info",
    "href": "chapters/chapter_03.html#session-info",
    "title": "3  Calculating substitution rates for selected Ensembl genomes",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-27\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version     date (UTC) lib source\n abind                  1.4-5       2016-07-21 [1] CRAN (R 4.3.2)\n ade4                   1.7-22      2023-02-06 [1] CRAN (R 4.3.2)\n AnnotationDbi          1.64.1      2023-11-03 [1] Bioconductor\n ape                    5.7-1       2023-03-13 [1] CRAN (R 4.3.2)\n Biobase                2.62.0      2023-10-24 [1] Bioconductor\n BiocFileCache          2.10.1      2023-10-26 [1] Bioconductor\n BiocGenerics           0.48.1      2023-11-01 [1] Bioconductor\n BiocIO                 1.12.0      2023-10-24 [1] Bioconductor\n BiocManager            1.30.22     2023-08-08 [1] CRAN (R 4.3.2)\n BiocParallel         * 1.37.0      2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n BiocStyle              2.30.0      2023-10-24 [1] Bioconductor\n biomaRt                2.58.2      2024-01-30 [1] Bioconductor 3.18 (R 4.3.2)\n Biostrings             2.70.2      2024-01-28 [1] Bioconductor 3.18 (R 4.3.2)\n bit                    4.0.5       2022-11-15 [1] CRAN (R 4.3.2)\n bit64                  4.0.5       2020-08-30 [1] CRAN (R 4.3.2)\n bitops                 1.0-7       2021-04-24 [1] CRAN (R 4.3.2)\n blob                   1.2.4       2023-03-17 [1] CRAN (R 4.3.2)\n cachem                 1.0.8       2023-05-01 [1] CRAN (R 4.3.2)\n cli                    3.6.2       2023-12-11 [1] CRAN (R 4.3.2)\n coda                   0.19-4.1    2024-01-31 [1] CRAN (R 4.3.2)\n codetools              0.2-19      2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0       2023-01-23 [1] CRAN (R 4.3.2)\n crayon                 1.5.2       2022-09-29 [1] CRAN (R 4.3.2)\n curl                   5.2.0       2023-12-08 [1] CRAN (R 4.3.2)\n DBI                    1.2.1       2024-01-12 [1] CRAN (R 4.3.2)\n dbplyr                 2.4.0       2023-10-26 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0      2023-10-24 [1] Bioconductor\n digest                 0.6.34      2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17      2022-02-07 [1] CRAN (R 4.3.2)\n doubletrouble        * 1.3.4       2024-02-05 [1] Bioconductor\n dplyr                * 1.1.4       2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23        2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6       2023-12-08 [1] CRAN (R 4.3.2)\n fastmap                1.1.1       2023-02-24 [1] CRAN (R 4.3.2)\n filelock               1.0.3       2023-12-11 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0       2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2       2022-02-02 [1] CRAN (R 4.3.2)\n generics               0.1.3       2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb           1.38.6      2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11      2023-12-21 [1] Bioconductor\n GenomicAlignments      1.38.2      2024-01-16 [1] Bioconductor 3.18 (R 4.3.2)\n GenomicFeatures        1.54.3      2024-01-31 [1] Bioconductor 3.18 (R 4.3.2)\n GenomicRanges          1.54.1      2023-10-29 [1] Bioconductor\n ggnetwork              0.5.13      2024-02-14 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4       2023-10-12 [1] CRAN (R 4.3.2)\n glue                   1.7.0       2024-01-09 [1] CRAN (R 4.3.2)\n gtable                 0.3.4       2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1       2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3       2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7       2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4       2023-12-06 [1] CRAN (R 4.3.2)\n httr                   1.4.7       2023-08-15 [1] CRAN (R 4.3.2)\n igraph                 2.0.1.1     2024-01-30 [1] CRAN (R 4.3.2)\n intergraph             2.0-4       2024-02-01 [1] CRAN (R 4.3.2)\n IRanges                2.36.0      2023-10-24 [1] Bioconductor\n iterators              1.0.14      2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8       2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST               1.42.0      2023-10-24 [1] Bioconductor\n knitr                  1.45        2023-10-30 [1] CRAN (R 4.3.2)\n lattice                0.22-5      2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4       2023-11-07 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3       2023-09-27 [1] CRAN (R 4.3.2)\n magrittr               2.0.3       2022-03-30 [1] CRAN (R 4.3.2)\n MASS                   7.3-60      2023-05-04 [4] CRAN (R 4.3.1)\n Matrix                 1.6-3       2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics         1.14.0      2023-10-24 [1] Bioconductor\n matrixStats            1.2.0       2023-12-11 [1] CRAN (R 4.3.2)\n mclust                 6.0.1       2023-11-15 [1] CRAN (R 4.3.2)\n memoise                2.0.1       2021-11-26 [1] CRAN (R 4.3.2)\n MSA2dist               1.6.0       2023-10-24 [1] Bioconductor\n munsell                0.5.0       2018-06-12 [1] CRAN (R 4.3.2)\n network                1.18.2      2023-12-05 [1] CRAN (R 4.3.2)\n networkD3              0.4         2017-03-18 [1] CRAN (R 4.3.2)\n nlme                   3.1-163     2023-08-09 [4] CRAN (R 4.3.1)\n pheatmap               1.0.12      2019-01-04 [1] CRAN (R 4.3.2)\n pillar                 1.9.0       2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3       2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8       2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits            1.2.0       2023-09-24 [1] CRAN (R 4.3.2)\n progress               1.2.3       2023-12-06 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2       2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1       2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs               0.3.3       2021-01-31 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3       2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12      2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14   2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5       2024-01-10 [1] CRAN (R 4.3.2)\n restfulr               0.0.15      2022-06-16 [1] CRAN (R 4.3.2)\n rjson                  0.2.21      2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3       2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25        2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4       2023-11-05 [1] CRAN (R 4.3.2)\n Rsamtools              2.18.0      2023-10-24 [1] Bioconductor\n RSQLite                2.3.5       2024-01-21 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0      2023-07-07 [1] CRAN (R 4.3.2)\n rtracklayer            1.62.0      2023-10-24 [1] Bioconductor\n S4Arrays               1.2.0       2023-10-24 [1] Bioconductor\n S4Vectors              0.40.2      2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0       2023-11-28 [1] CRAN (R 4.3.2)\n seqinr                 4.2-36      2023-12-08 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2       2021-12-06 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4       2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n statnet.common         4.9.0       2023-05-24 [1] CRAN (R 4.3.2)\n stringi                1.8.3       2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1       2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment   1.32.0      2023-10-24 [1] Bioconductor\n syntenet             * 1.4.0       2023-10-24 [1] Bioconductor\n tibble               * 3.2.1       2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1       2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0       2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0       2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0       2024-01-18 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0       2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4       2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5       2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0       2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42        2024-02-08 [1] CRAN (R 4.3.2)\n XML                    3.99-0.16.1 2024-01-22 [1] CRAN (R 4.3.2)\n xml2                   1.3.6       2023-12-04 [1] CRAN (R 4.3.2)\n XVector                0.42.0      2023-10-24 [1] Bioconductor\n yaml                   2.3.8       2023-12-11 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0      2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Calculating substitution rates for selected Ensembl genomes</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html",
    "href": "chapters/chapter_04.html",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "",
    "text": "4.1 Loading data\nFirst, we will load object the same list of metadata we’ve been using in other chapters.\n# Load metadata\nload(here(\"products\", \"result_files\", \"metadata_all.rda\"))\nWe will also need objects generated in previous chapters, namely:\n# Load BUSCO scores\nload(here(\"products\", \"result_files\", \"busco_scores\", \"fungi_busco_scores.rda\"))\nload(here(\"products\", \"result_files\", \"busco_scores\", \"protists_busco_scores.rda\"))\nload(here(\"products\", \"result_files\", \"busco_scores\", \"plants_busco_scores.rda\"))\nload(here(\"products\", \"result_files\", \"busco_scores\", \"metazoa_busco_scores.rda\"))\nload(here(\"products\", \"result_files\", \"busco_scores\", \"vertebrates_busco_scores.rda\"))\n\n# Load trees\nload(here(\"products\", \"result_files\", \"trees\", \"fungi_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"protists_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"plants_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"metazoa_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"vertebrates_busco_trees.rda\"))\n\n# Load duplicated genes\nload(here(\"products\", \"result_files\", \"fungi_duplicates_unique.rda\"))\nload(here(\"products\", \"result_files\", \"protists_duplicates_unique.rda\"))\nload(here(\"products\", \"result_files\", \"plants_duplicates_unique.rda\"))\nload(here(\"products\", \"result_files\", \"vertebrates_duplicates_unique.rda\"))\nload(here(\"products\", \"result_files\", \"metazoa_duplicates_unique.rda\"))\n\n# Load substitution rates for plants\nload(here(\"products\", \"result_files\", \"plants_kaks.rda\"))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html#loading-data",
    "href": "chapters/chapter_04.html#loading-data",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "",
    "text": "Species trees\nDuplicates per species (genes and gene pairs)\nBUSCO scores for genomes in each instance",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html#visualizing-the-frequency-of-duplicated-genes-by-mode",
    "href": "chapters/chapter_04.html#visualizing-the-frequency-of-duplicated-genes-by-mode",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "4.2 Visualizing the frequency of duplicated genes by mode",
    "text": "4.2 Visualizing the frequency of duplicated genes by mode\nNow, we will visualize the frequency of duplicated genes by mode for each species. For that, we will first convert the list of duplicates into a long-formatted data frame, and clean tip labels in our species trees.\n\n# Rename tip labels of trees\ntree_fungi &lt;- fungi_busco_trees$conc\ntree_fungi$tip.label &lt;- gsub(\"\\\\.\", \"_\", tree_fungi$tip.label)\n\ntree_protists &lt;- protists_busco_trees$conc\ntree_protists$tip.label &lt;- gsub(\"\\\\.\", \"_\", tree_protists$tip.label)\n\ntree_plants &lt;- plants_busco_trees$conc\ntree_plants$tip.label &lt;- gsub(\"\\\\.\", \"_\", tree_plants$tip.label)\n\ntree_metazoa &lt;- metazoa_busco_trees$conc\ntree_metazoa$tip.label &lt;- gsub(\"\\\\.\", \"_\", tree_metazoa$tip.label)\n\ntree_vertebrates &lt;- vertebrates_busco_trees$conc\ntree_vertebrates$tip.label &lt;- gsub(\"\\\\.\", \"_\", tree_vertebrates$tip.label)\n\n# Get count tables\ncounts_fungi &lt;- duplicates2counts(fungi_duplicates_unique)\ncounts_protists &lt;- duplicates2counts(protists_duplicates_unique)\ncounts_plants &lt;- duplicates2counts(plants_duplicates_unique)\ncounts_vertebrates &lt;- duplicates2counts(vertebrates_duplicates_unique)\ncounts_metazoa &lt;- duplicates2counts(metazoa_duplicates_unique)\n\nNow, we will plot the trees with data for each Ensembl instance.\n\n# Fungi\np_fungi_tree &lt;- plot_tree_taxa(\n    tree = tree_fungi, \n    metadata = metadata_all$fungi, \n    taxon = \"phylum\",\n    text_size = 2.5\n)\n\np_fungi &lt;- wrap_plots(\n    # Plot 1: Species tree\n    p_fungi_tree,\n    # Plot 2: Duplicate relative frequency by mode\n    plot_duplicate_freqs(\n        counts_fungi |&gt;\n            mutate(\n                species = factor(species, levels = rev(get_taxa_name(p_fungi_tree)))\n            ),\n        plot_type = \"stack_percent\"\n    ) +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ) +\n        labs(y = NULL),\n    widths = c(1, 4)\n) +\n    plot_annotation(title = \"Fungi\") &\n    theme(plot.margin = margin(2, 0, 0, 2))\n\n# Protists\np_protists_tree &lt;- plot_tree_taxa(\n    tree = tree_protists, \n    metadata = metadata_all$protists |&gt;\n        filter(phylum != \"Evosea\"), \n    taxon = \"phylum\", \n    min_n_lab = 2,\n    padding_text = 0.2,\n    text_size = 2.5\n)\np_protists &lt;- wrap_plots(\n    # Plot 1: Species tree\n    p_protists_tree,\n    # Plot 2: Duplicate relative frequency by mode\n    plot_duplicate_freqs(\n        counts_protists |&gt;\n            mutate(\n                species = factor(species, levels = rev(get_taxa_name(p_protists_tree)))\n            ),\n        plot_type = \"stack_percent\") +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ) +\n        labs(y = NULL),\n    widths = c(1, 4)\n) +\n    plot_annotation(title = \"Protists\") &\n    theme(plot.margin = margin(2, 0, 0, 2))\n\n\n# Plants\np_plants_tree &lt;- plot_tree_taxa(\n    tree = tree_plants, \n    metadata = metadata_all$plants, \n    taxon = \"order\", \n    min_n_lab = 3,\n    text_size = 2.5\n)\np_plants &lt;- wrap_plots(\n    # Plot 1: Species tree\n    p_plants_tree,\n    # Plot 2: Duplicate relative frequency by mode\n    plot_duplicate_freqs(\n        counts_plants |&gt;\n            mutate(\n                species = factor(species, levels = rev(get_taxa_name(p_plants_tree)))\n            ),\n        plot_type = \"stack_percent\") +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ) +\n        labs(y = NULL),\n    widths = c(1, 4)\n) +\n    plot_annotation(title = \"Plants\") &\n    theme(plot.margin = margin(2, 0, 0, 2))\n\n# Metazoa\np_metazoa_tree &lt;- plot_tree_taxa(\n    tree = tree_metazoa, \n    metadata = metadata_all$metazoa |&gt;\n        filter(class != \"Myxozoa\"), \n    taxon = \"phylum\", \n    min_n = 2, \n    text_size = 2.2, \n    padding_text = 2\n)\np_metazoa &lt;- wrap_plots(\n    # Plot 1: Species tree\n    p_metazoa_tree,\n    # Plot 2: Duplicate relative frequency by mode\n    plot_duplicate_freqs(\n        counts_metazoa |&gt;\n            mutate(\n                species = factor(species, levels = rev(get_taxa_name(p_metazoa_tree)))\n            ),\n        plot_type = \"stack_percent\") +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ) +\n        labs(y = NULL),\n    widths = c(1, 4) \n) +\n    plot_annotation(title = \"Metazoa\") &\n    theme(plot.margin = margin(2, 0, 0, 2))\n\n# Vertebrates\np_vertebrates_tree &lt;- plot_tree_taxa(\n    tree = tree_vertebrates, \n    metadata = metadata_all$ensembl |&gt;\n        mutate(class = replace_na(class, \"Other\")), \n    taxon = \"class\", \n    min_n = 2, \n    text_size = 2.5\n)\np_vertebrates &lt;- wrap_plots(\n    # Plot 1: Species tree\n    p_vertebrates_tree,\n    # Plot 2: Duplicate relative frequency by mode\n    plot_duplicate_freqs(\n        counts_vertebrates |&gt;\n            mutate(\n                species = factor(species, levels = rev(get_taxa_name(p_vertebrates_tree)))\n            ),\n        plot_type = \"stack_percent\") +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ) +\n        labs(y = NULL),\n    widths = c(1, 4)\n) +\n    plot_annotation(title = \"Vertebrates\") &\n    theme(plot.margin = margin(2, 0, 0, 2))\n\n# Combining all figures into one\np_duplicates_all_ensembl &lt;- wrap_plots(\n    wrap_plots(\n        p_protists + \n            theme(legend.position = \"none\") + \n            labs(title = \"Protists\", x = NULL), \n        p_fungi + \n            theme(legend.position = \"none\") +\n            ggtitle(\"Fungi\"),\n        nrow = 2, heights = c(1, 2)\n    ), \n    p_plants + theme(legend.position = \"none\") + ggtitle(\"Plants\"), \n    p_metazoa + theme(legend.position = \"none\") + ggtitle(\"Metazoa (Invertebrates)\"), \n    p_vertebrates + ggtitle(\"Ensembl (Vertebrates)\"), \n    nrow = 1\n) +\n    plot_layout(axis_titles = \"collect\")\n\n\np_duplicates_all_ensembl\n\n\n\n\n\n\n\n\nBy visually comparing the Ensembl instances, we can see that plant genomes have a much greater abundance of segmental duplicates, possibly due to pervasive whole-genome duplication events. However, other major branches of the Eukarya tree of life also have particular species with a high proportion of SD-derived genes. Notably, while SD events are widespread in plants, vertebrate species with high proportions of SD-derived genes are concentrated in a particular branch (teleost fishes). To investigate that, we will highlight species for which at least 20% of the duplicated genes derived from segmental duplications.\n\n# For each Ensembl instance, show species with &gt;=20% of genes derived from SD\n## Define helper function\nsd_abundant &lt;- function(count_table, min = 20) {\n    \n    perc_table &lt;- count_table |&gt; \n        group_by(species) |&gt; \n        mutate(percentage = (n / sum(n)) * 100) |&gt; \n        ungroup() |&gt; \n        filter(type == \"SD\", percentage &gt;= min)\n    \n    return(perc_table)\n}\n\n# Get a table of SD-abundant species for each instance\nsd_abundant_spp &lt;- bind_rows(\n    sd_abundant(counts_fungi) |&gt; mutate(instance = \"fungi\"),\n    sd_abundant(counts_protists) |&gt; mutate(instance = \"protists\"),\n    sd_abundant(counts_plants) |&gt; mutate(instance = \"plants\"),\n    sd_abundant(counts_vertebrates) |&gt; mutate(instance = \"vertebrates\"),\n    sd_abundant(counts_metazoa) |&gt; mutate(instance = \"metazoa\")\n) |&gt;\n    as.data.frame()\n\nThen, let’s summarize the frequencies (absolute and relative) in a table.\n\n# How many species per instance?\nsd_abundant_spp |&gt; \n    count(instance) |&gt;\n    mutate(\n        percentage = n / c(\n            nrow(metadata_all$fungi),\n            nrow(metadata_all$metazoa),\n            nrow(metadata_all$plants),\n            nrow(metadata_all$protists),\n            nrow(metadata_all$ensembl)\n        ) * 100\n    )\n\n     instance  n percentage\n1       fungi  2   2.857143\n2     metazoa  7   2.766798\n3      plants 94  63.087248\n4    protists  2   6.060606\n5 vertebrates 21   6.624606\n\n\nOnce again, our findings highlight the abundance of large-scale duplications in plant genomes, as segmental duplications contributed to 20% of the duplicated genes in 94 species (63%). Next, let’s print all SD-abundant species.\n\n# Show all species\nknitr::kable(sd_abundant_spp)\n\n\n\n\n\n\n\n\n\n\n\ntype\nn\nspecies\npercentage\ninstance\n\n\n\n\nSD\n2138\nfusarium_oxysporum\n20.16030\nfungi\n\n\nSD\n683\nsaccharomyces_cerevisiae\n26.16858\nfungi\n\n\nSD\n14351\nemiliania_huxleyi\n43.78509\nprotists\n\n\nSD\n27661\nparamecium_tetraurelia\n79.03369\nprotists\n\n\nSD\n22430\nactinidia_chinensis\n72.54908\nplants\n\n\nSD\n4357\nananas_comosus\n22.15048\nplants\n\n\nSD\n5885\narabidopsis_halleri\n21.37202\nplants\n\n\nSD\n7530\narabidopsis_thaliana\n33.29796\nplants\n\n\nSD\n42997\navena_sativa_ot3098\n74.43306\nplants\n\n\nSD\n63492\navena_sativa_sang\n79.22833\nplants\n\n\nSD\n7461\nbrachypodium_distachyon\n27.24285\nplants\n\n\nSD\n48381\nbrassica_juncea\n69.66407\nplants\n\n\nSD\n59918\nbrassica_napus\n63.31417\nplants\n\n\nSD\n24314\nbrassica_oleracea\n44.30232\nplants\n\n\nSD\n23541\nbrassica_rapa\n62.58907\nplants\n\n\nSD\n19282\nbrassica_rapa_ro18\n49.29567\nplants\n\n\nSD\n69355\ncamelina_sativa\n79.45628\nplants\n\n\nSD\n15785\nchenopodium_quinoa\n48.57371\nplants\n\n\nSD\n3600\ncitrullus_lanatus\n22.76608\nplants\n\n\nSD\n4084\ncoffea_canephora\n20.60545\nplants\n\n\nSD\n3317\ncynara_cardunculus\n20.20959\nplants\n\n\nSD\n41246\ndigitaria_exilis\n75.51999\nplants\n\n\nSD\n8809\ndioscorea_rotundata\n32.30764\nplants\n\n\nSD\n66262\nechinochloa_crusgalli\n70.97016\nplants\n\n\nSD\n13447\neragrostis_curvula\n27.40650\nplants\n\n\nSD\n46488\neucalyptus_grandis\n75.45773\nplants\n\n\nSD\n6846\nficus_carica\n30.61580\nplants\n\n\nSD\n6747\ngaldieria_sulphuraria\n25.40573\nplants\n\n\nSD\n36994\nglycine_max\n72.19468\nplants\n\n\nSD\n16290\ngossypium_raimondii\n48.65882\nplants\n\n\nSD\n13432\nhelianthus_annuus\n23.21425\nplants\n\n\nSD\n9537\nipomoea_triloba\n35.65100\nplants\n\n\nSD\n13096\njuglans_regia\n34.16556\nplants\n\n\nSD\n7374\nkalanchoe_fedtschenkoi\n28.37900\nplants\n\n\nSD\n6757\nlactuca_sativa\n20.52178\nplants\n\n\nSD\n5758\nleersia_perrieri\n25.97321\nplants\n\n\nSD\n16167\nlupinus_angustifolius\n54.14448\nplants\n\n\nSD\n22987\nmalus_domestica_golden\n62.58031\nplants\n\n\nSD\n14278\nmanihot_esculenta\n52.81693\nplants\n\n\nSD\n16170\nmusa_acuminata\n54.10017\nplants\n\n\nSD\n4586\nnymphaea_colorata\n20.98472\nplants\n\n\nSD\n5092\noryza_barthii\n20.55464\nplants\n\n\nSD\n5078\noryza_brachyantha\n23.83366\nplants\n\n\nSD\n6054\noryza_glaberrima\n23.77567\nplants\n\n\nSD\n5454\noryza_glumipatula\n21.46484\nplants\n\n\nSD\n5847\noryza_punctata\n24.25437\nplants\n\n\nSD\n5587\noryza_rufipogon\n21.24335\nplants\n\n\nSD\n6096\noryza_sativa\n23.94344\nplants\n\n\nSD\n6136\noryza_sativa_arc\n22.25769\nplants\n\n\nSD\n6139\noryza_sativa_azucena\n22.19370\nplants\n\n\nSD\n6186\noryza_sativa_chaomeo\n22.05583\nplants\n\n\nSD\n6125\noryza_sativa_gobolsailbalam\n22.38506\nplants\n\n\nSD\n6207\noryza_sativa_ir64\n22.73876\nplants\n\n\nSD\n6131\noryza_sativa_ketannangka\n22.16238\nplants\n\n\nSD\n6479\noryza_sativa_khaoyaiguang\n23.36964\nplants\n\n\nSD\n6144\noryza_sativa_larhamugad\n22.46107\nplants\n\n\nSD\n7212\noryza_sativa_lima\n25.41584\nplants\n\n\nSD\n15680\noryza_sativa_liuxu\n43.62827\nplants\n\n\nSD\n6044\noryza_sativa_mh63\n22.24512\nplants\n\n\nSD\n6158\noryza_sativa_n22\n22.43270\nplants\n\n\nSD\n6133\noryza_sativa_natelboro\n22.56688\nplants\n\n\nSD\n6172\noryza_sativa_pr106\n22.42896\nplants\n\n\nSD\n6084\noryza_sativa_zs97\n22.69810\nplants\n\n\nSD\n6182\npanicum_hallii\n25.04761\nplants\n\n\nSD\n5920\npanicum_hallii_fil2\n23.51633\nplants\n\n\nSD\n19358\npapaver_somniferum\n53.13169\nplants\n\n\nSD\n8274\nphaseolus_vulgaris\n35.38165\nplants\n\n\nSD\n4494\nphyscomitrium_patens\n20.34221\nplants\n\n\nSD\n19860\npopulus_trichocarpa\n64.67159\nplants\n\n\nSD\n4340\nprunus_persica\n20.51040\nplants\n\n\nSD\n28231\nsaccharum_spontaneum\n60.01743\nplants\n\n\nSD\n26322\nselaginella_moellendorffii\n78.55906\nplants\n\n\nSD\n8274\nsesamum_indicum\n40.09887\nplants\n\n\nSD\n5474\nsetaria_italica\n20.87799\nplants\n\n\nSD\n5966\nsetaria_viridis\n20.86525\nplants\n\n\nSD\n6400\nsolanum_lycopersicum\n23.89486\nplants\n\n\nSD\n5462\nsorghum_bicolor\n21.38857\nplants\n\n\nSD\n4707\ntheobroma_cacao\n21.34888\nplants\n\n\nSD\n4700\ntheobroma_cacao_criollo\n27.23059\nplants\n\n\nSD\n79033\ntriticum_aestivum\n74.43304\nplants\n\n\nSD\n84812\ntriticum_aestivum_arinalrfor\n59.47838\nplants\n\n\nSD\n83573\ntriticum_aestivum_jagger\n60.03419\nplants\n\n\nSD\n84383\ntriticum_aestivum_julius\n60.38658\nplants\n\n\nSD\n83838\ntriticum_aestivum_lancer\n60.23148\nplants\n\n\nSD\n84018\ntriticum_aestivum_landmark\n60.46244\nplants\n\n\nSD\n83797\ntriticum_aestivum_mace\n60.13290\nplants\n\n\nSD\n84076\ntriticum_aestivum_mattis\n60.28855\nplants\n\n\nSD\n85143\ntriticum_aestivum_norin61\n59.19326\nplants\n\n\nSD\n78393\ntriticum_aestivum_refseqv2\n74.92903\nplants\n\n\nSD\n71709\ntriticum_aestivum_renan\n72.46554\nplants\n\n\nSD\n84481\ntriticum_aestivum_stanley\n60.76589\nplants\n\n\nSD\n39910\ntriticum_dicoccoides\n66.30559\nplants\n\n\nSD\n79753\ntriticum_spelta\n71.15848\nplants\n\n\nSD\n40003\ntriticum_turgidum\n61.74827\nplants\n\n\nSD\n6408\nvigna_angularis\n22.74437\nplants\n\n\nSD\n5792\nvigna_radiata\n31.59503\nplants\n\n\nSD\n9733\nvigna_unguiculata\n36.46001\nplants\n\n\nSD\n12270\nzea_mays\n36.60283\nplants\n\n\nSD\n33441\ncarassius_auratus\n63.10337\nvertebrates\n\n\nSD\n3320\nchelydra_serpentina\n20.89759\nvertebrates\n\n\nSD\n32958\ncyprinus_carpio_carpio\n76.37476\nvertebrates\n\n\nSD\n32609\ncyprinus_carpio_germanmirror\n75.35298\nvertebrates\n\n\nSD\n29145\ncyprinus_carpio_hebaored\n65.96578\nvertebrates\n\n\nSD\n31855\ncyprinus_carpio_huanghe\n72.97322\nvertebrates\n\n\nSD\n7716\ndanio_rerio\n29.36073\nvertebrates\n\n\nSD\n4099\nesox_lucius\n20.63220\nvertebrates\n\n\nSD\n4039\nhomo_sapiens\n21.22996\nvertebrates\n\n\nSD\n16593\nhucho_hucho\n35.39387\nvertebrates\n\n\nSD\n27413\noncorhynchus_kisutch\n67.90775\nvertebrates\n\n\nSD\n30397\noncorhynchus_mykiss\n68.93838\nvertebrates\n\n\nSD\n27241\noncorhynchus_tshawytscha\n68.78519\nvertebrates\n\n\nSD\n5961\nparamormyrops_kingsleyae\n29.53183\nvertebrates\n\n\nSD\n29770\nsalmo_salar\n67.73144\nvertebrates\n\n\nSD\n30000\nsalmo_trutta\n73.09585\nvertebrates\n\n\nSD\n8900\nscleropages_formosus\n44.73936\nvertebrates\n\n\nSD\n30939\nsinocyclocheilus_anshuiensis\n73.04169\nvertebrates\n\n\nSD\n27003\nsinocyclocheilus_grahami\n63.16048\nvertebrates\n\n\nSD\n29952\nsinocyclocheilus_rhinocerous\n68.66260\nvertebrates\n\n\nSD\n3940\nterrapene_carolina_triunguis\n22.53231\nvertebrates\n\n\nSD\n13217\nactinia_equina_gca011057435\n34.55335\nmetazoa\n\n\nSD\n31761\nadineta_vaga\n73.23265\nmetazoa\n\n\nSD\n12381\namphibalanus_amphitrite_gca019059575v1\n49.10757\nmetazoa\n\n\nSD\n6049\ncaenorhabditis_brenneri\n25.57825\nmetazoa\n\n\nSD\n8823\ncrassostrea_virginica_gca002022765v4\n29.95213\nmetazoa\n\n\nSD\n4261\nlytechinus_variegatus_gca018143015v1\n24.31384\nmetazoa\n\n\nSD\n4906\nstrongylocentrotus_purpuratus\n21.82579\nmetazoa",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html#busco-scores",
    "href": "chapters/chapter_04.html#busco-scores",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "4.3 BUSCO scores",
    "text": "4.3 BUSCO scores\nNext, we will test whether the percentage of segmental duplicates in genomes is associated with the percentage of complete BUSCOs. In other words, we want to find out whether the low percentages of SD gene pairs is due to genome fragmentation.\n\n# Define function to plot association between % SD and % complete BUSCOs\nplot_busco_sd_assoc &lt;- function(busco_df, counts_table) {\n    \n    p &lt;- busco_df |&gt;\n        filter(Class %in% c(\"Complete_SC\", \"Complete_duplicate\")) |&gt;\n        mutate(species = str_replace_all(File, \"\\\\.fa\", \"\")) |&gt;\n        mutate(species = str_replace_all(species, \"\\\\.\", \"_\")) |&gt;\n        group_by(species) |&gt; \n        summarise(complete_BUSCOs = sum(Frequency)) |&gt;\n        inner_join(sd_abundant(counts_table, min = 0)) |&gt;\n        ggpubr::ggscatter(\n            x = \"complete_BUSCOs\", y = \"percentage\",\n            color = \"deepskyblue4\", alpha = 0.4,\n            add = \"reg.line\", add.params = list(\n                color = \"black\", fill = \"lightgray\"\n            ),\n            conf.int = TRUE,\n            cor.coef = TRUE,\n            cor.coeff.args = list(\n                method = \"pearson\", label.x = 3, label.sep = \"\\n\"\n            )\n        ) +\n        labs(x = \"% complete BUSCOs\", y = \"% SD duplicates\")\n    \n    return(p)\n}\n\n# Fungi\np_busco_association &lt;- patchwork::wrap_plots(\n    plot_busco_sd_assoc(fungi_busco_scores, counts_fungi) + \n        labs(title = \"Fungi\"),\n    plot_busco_sd_assoc(plants_busco_scores, counts_plants) +\n        labs(title = \"Plants\"),\n    plot_busco_sd_assoc(protists_busco_scores, counts_protists) + \n        labs(title = \"Protists\"),\n    plot_busco_sd_assoc(metazoa_busco_scores, counts_metazoa) +\n        labs(title = \"Metazoa\"),\n    plot_busco_sd_assoc(vertebrates_busco_scores, counts_vertebrates) +\n        labs(title = \"Vertebrates\"),\n    nrow = 1\n)\n\n\np_busco_association\n\n\n\n\n\n\n\n\nThere is weak or no association between the percentage of complete BUSCOs and the percentage of SD-derived genes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html#visualizing-substitution-rates-for-selected-plant-species",
    "href": "chapters/chapter_04.html#visualizing-substitution-rates-for-selected-plant-species",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "4.4 Visualizing substitution rates for selected plant species",
    "text": "4.4 Visualizing substitution rates for selected plant species\nHere, we will first visualize \\(K_s\\) distributions for Glycine max and Phaseolus vulgaris by mode of duplication.\n\n# G. max\ngmax_ks_distro &lt;- plot_ks_distro(\n    plants_kaks$glycine_max, max_ks = 2, bytype = TRUE, binwidth = 0.03\n) +\n    labs(title = NULL, y = NULL)\n\n# P. vulgaris\npvu_ks_distro &lt;- plot_ks_distro(\n    plants_kaks$phaseolus_vulgaris, max_ks = 2, bytype = TRUE, binwidth = 0.03\n) +\n    labs(title = NULL, y = NULL)\n\n\n# Combining plots\np_ks_legumes &lt;- wrap_plots(\n    gmax_ks_distro + \n        labs(title = \"Glycine max\") +\n        theme(plot.title = element_text(face = \"italic\")), \n    pvu_ks_distro + \n        labs(title = \"Phaseolus vulgaris\") +\n        theme(plot.title = element_text(face = \"italic\")), \n    nrow = 1\n)\n\n\np_ks_legumes\n\n\n\n\n\n\n\n\nThe plot shows the importance of visualizing Ks distributions by mode. When visualizing the whole-paranome distribution, detection of peaks is not trivial, and potential whole-genome duplication events might be masked. When we split the distribution by mode of duplication, we can more easily observe segmental duplicates that cluster together, providing strong evidence for whole-genome duplication events (2 events for G. max, and 1 events for P. vulgaris).\nNext, we will plot the distributions of \\(K_a\\), \\(K_s\\), and \\(K_a/K_s\\) values for selected plant species with phylogenetic context.\n\n# Subset plant tree to get selected species only\ntree_subset &lt;- ape::keep.tip(tree_plants, names(plants_kaks))\n\n# Clean names\nnames(plants_kaks) &lt;- gsub(\"_\", \" \", str_to_title(names(plants_kaks)))\ntree_subset$tip.label &lt;- gsub(\"_\", \" \", str_to_title(tree_subset$tip.label))\n\n# Plot tree\np_tree_selected &lt;- ggtree(tree_subset, branch.length = \"none\") +\n    geom_tiplab(fontface = \"italic\", size = 3)\n\n# Reoder rates list based on tree topology\nord &lt;- rev(ggtree::get_taxa_name(p_tree_selected))\nrl &lt;- plants_kaks[ord]\n\n# Plot rates by species with tree on the left\np_rates_phylogeny &lt;- wrap_plots(\n    p_tree_selected + xlim(0, 10),\n    plot_rates_by_species(rl, rate_column = \"Ks\", range = c(0, 2)) +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ),\n    plot_rates_by_species(\n        rl, rate_column = \"Ka\", range = c(0, 2), \n        fill = \"mediumseagreen\", color = \"seagreen\"\n    ) +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ),\n    plot_rates_by_species(\n        rl, rate_column = \"Ka_Ks\", range = c(0, 2),\n        fill = \"darkorange2\", color = \"darkorange3\"\n    ) +\n        theme(\n            axis.text.y = element_blank(),\n            axis.ticks.y = element_blank()\n        ),\n    nrow = 1\n) +\n    plot_annotation(title = \"Substitution rates in a phylogenetic context\")\n\n\np_rates_phylogeny",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html#saving-objects",
    "href": "chapters/chapter_04.html#saving-objects",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "Saving objects",
    "text": "Saving objects\nFinally, let’s save important objects created in this session for further use.\n\n# Save plots for each instance\nsave(\n    p_fungi, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"p_fungi.rda\")\n)\n\nsave(\n    p_metazoa, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"p_metazoa.rda\")\n)\n\nsave(\n    p_protists, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"p_protists.rda\")\n)\n\nsave(\n    p_vertebrates, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"p_vertebrates.rda\")\n)\n\nsave(\n    p_plants, compress = \"xz\", \n    file = here(\"products\", \"plots\", \"p_plants.rda\")\n)\n\nsave(\n    p_duplicates_all_ensembl, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_duplicates_all_ensembl.rda\")\n)\n\nsave(\n    p_ks_legumes, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_ks_legumes.rda\")\n)\n\nsave(\n    p_rates_phylogeny, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_rates_phylogeny.rda\")\n)\n\nsave(\n    p_busco_association, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_busco_association.rda\")\n)\n\n# Save tables\nsave(\n    sd_abundant_spp, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"sd_abundant_spp.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_04.html#session-info",
    "href": "chapters/chapter_04.html#session-info",
    "title": "4  Visual exploration of duplicated genes across the Eukarya tree of life",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-27\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version     date (UTC) lib source\n abind                  1.4-5       2016-07-21 [1] CRAN (R 4.3.2)\n ade4                   1.7-22      2023-02-06 [1] CRAN (R 4.3.2)\n AnnotationDbi          1.64.1      2023-11-03 [1] Bioconductor\n ape                    5.7-1       2023-03-13 [1] CRAN (R 4.3.2)\n aplot                  0.2.2       2023-10-06 [1] CRAN (R 4.3.2)\n backports              1.4.1       2021-12-13 [1] CRAN (R 4.3.2)\n Biobase                2.62.0      2023-10-24 [1] Bioconductor\n BiocFileCache          2.10.1      2023-10-26 [1] Bioconductor\n BiocGenerics           0.48.1      2023-11-01 [1] Bioconductor\n BiocIO                 1.12.0      2023-10-24 [1] Bioconductor\n BiocParallel           1.37.0      2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n biomaRt                2.58.2      2024-01-30 [1] Bioconductor 3.18 (R 4.3.2)\n Biostrings             2.70.2      2024-01-28 [1] Bioconductor 3.18 (R 4.3.2)\n bit                    4.0.5       2022-11-15 [1] CRAN (R 4.3.2)\n bit64                  4.0.5       2020-08-30 [1] CRAN (R 4.3.2)\n bitops                 1.0-7       2021-04-24 [1] CRAN (R 4.3.2)\n blob                   1.2.4       2023-03-17 [1] CRAN (R 4.3.2)\n broom                  1.0.5       2023-06-09 [1] CRAN (R 4.3.2)\n cachem                 1.0.8       2023-05-01 [1] CRAN (R 4.3.2)\n car                    3.1-2       2023-03-30 [1] CRAN (R 4.3.2)\n carData                3.0-5       2022-01-06 [1] CRAN (R 4.3.2)\n cli                    3.6.2       2023-12-11 [1] CRAN (R 4.3.2)\n coda                   0.19-4.1    2024-01-31 [1] CRAN (R 4.3.2)\n codetools              0.2-19      2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0       2023-01-23 [1] CRAN (R 4.3.2)\n crayon                 1.5.2       2022-09-29 [1] CRAN (R 4.3.2)\n curl                   5.2.0       2023-12-08 [1] CRAN (R 4.3.2)\n DBI                    1.2.1       2024-01-12 [1] CRAN (R 4.3.2)\n dbplyr                 2.4.0       2023-10-26 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0      2023-10-24 [1] Bioconductor\n digest                 0.6.34      2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17      2022-02-07 [1] CRAN (R 4.3.2)\n doubletrouble        * 1.3.4       2024-02-05 [1] Bioconductor\n dplyr                * 1.1.4       2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23        2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6       2023-12-08 [1] CRAN (R 4.3.2)\n farver                 2.1.1       2022-07-06 [1] CRAN (R 4.3.2)\n fastmap                1.1.1       2023-02-24 [1] CRAN (R 4.3.2)\n filelock               1.0.3       2023-12-11 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0       2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2       2022-02-02 [1] CRAN (R 4.3.2)\n fs                     1.6.3       2023-07-20 [1] CRAN (R 4.3.2)\n generics               0.1.3       2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb           1.38.6      2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11      2023-12-21 [1] Bioconductor\n GenomicAlignments      1.38.2      2024-01-16 [1] Bioconductor 3.18 (R 4.3.2)\n GenomicFeatures        1.54.3      2024-01-31 [1] Bioconductor 3.18 (R 4.3.2)\n GenomicRanges          1.54.1      2023-10-29 [1] Bioconductor\n ggfun                  0.1.4       2024-01-19 [1] CRAN (R 4.3.2)\n ggnetwork              0.5.13      2024-02-14 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4       2023-10-12 [1] CRAN (R 4.3.2)\n ggplotify              0.1.2       2023-08-09 [1] CRAN (R 4.3.2)\n ggpubr                 0.6.0.999   2024-02-09 [1] Github (kassambara/ggpubr@6aeb4f7)\n ggsignif               0.6.4       2022-10-13 [1] CRAN (R 4.3.2)\n ggtree               * 3.10.0      2023-10-24 [1] Bioconductor\n glue                   1.7.0       2024-01-09 [1] CRAN (R 4.3.2)\n gridGraphics           0.5-1       2020-12-13 [1] CRAN (R 4.3.2)\n gtable                 0.3.4       2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1       2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3       2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7       2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4       2023-12-06 [1] CRAN (R 4.3.2)\n httr                   1.4.7       2023-08-15 [1] CRAN (R 4.3.2)\n igraph                 2.0.1.1     2024-01-30 [1] CRAN (R 4.3.2)\n intergraph             2.0-4       2024-02-01 [1] CRAN (R 4.3.2)\n IRanges                2.36.0      2023-10-24 [1] Bioconductor\n iterators              1.0.14      2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8       2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST               1.42.0      2023-10-24 [1] Bioconductor\n knitr                  1.45        2023-10-30 [1] CRAN (R 4.3.2)\n labeling               0.4.3       2023-08-29 [1] CRAN (R 4.3.2)\n lattice                0.22-5      2023-10-24 [4] CRAN (R 4.3.1)\n lazyeval               0.2.2       2019-03-15 [1] CRAN (R 4.3.2)\n lifecycle              1.0.4       2023-11-07 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3       2023-09-27 [1] CRAN (R 4.3.2)\n magrittr               2.0.3       2022-03-30 [1] CRAN (R 4.3.2)\n MASS                   7.3-60      2023-05-04 [4] CRAN (R 4.3.1)\n Matrix                 1.6-3       2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics         1.14.0      2023-10-24 [1] Bioconductor\n matrixStats            1.2.0       2023-12-11 [1] CRAN (R 4.3.2)\n mclust                 6.0.1       2023-11-15 [1] CRAN (R 4.3.2)\n memoise                2.0.1       2021-11-26 [1] CRAN (R 4.3.2)\n mgcv                   1.9-0       2023-07-11 [4] CRAN (R 4.3.1)\n MSA2dist               1.6.0       2023-10-24 [1] Bioconductor\n munsell                0.5.0       2018-06-12 [1] CRAN (R 4.3.2)\n network                1.18.2      2023-12-05 [1] CRAN (R 4.3.2)\n networkD3              0.4         2017-03-18 [1] CRAN (R 4.3.2)\n nlme                   3.1-163     2023-08-09 [4] CRAN (R 4.3.1)\n patchwork            * 1.2.0       2024-01-08 [1] CRAN (R 4.3.2)\n pheatmap               1.0.12      2019-01-04 [1] CRAN (R 4.3.2)\n pillar                 1.9.0       2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3       2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8       2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits            1.2.0       2023-09-24 [1] CRAN (R 4.3.2)\n progress               1.2.3       2023-12-06 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2       2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1       2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs               0.3.3       2021-01-31 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3       2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12      2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14   2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5       2024-01-10 [1] CRAN (R 4.3.2)\n restfulr               0.0.15      2022-06-16 [1] CRAN (R 4.3.2)\n rjson                  0.2.21      2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3       2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25        2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4       2023-11-05 [1] CRAN (R 4.3.2)\n Rsamtools              2.18.0      2023-10-24 [1] Bioconductor\n RSQLite                2.3.5       2024-01-21 [1] CRAN (R 4.3.2)\n rstatix                0.7.2       2023-02-01 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0      2023-07-07 [1] CRAN (R 4.3.2)\n rtracklayer            1.62.0      2023-10-24 [1] Bioconductor\n S4Arrays               1.2.0       2023-10-24 [1] Bioconductor\n S4Vectors              0.40.2      2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0       2023-11-28 [1] CRAN (R 4.3.2)\n seqinr                 4.2-36      2023-12-08 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2       2021-12-06 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4       2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n statnet.common         4.9.0       2023-05-24 [1] CRAN (R 4.3.2)\n stringi                1.8.3       2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1       2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment   1.32.0      2023-10-24 [1] Bioconductor\n syntenet               1.4.0       2023-10-24 [1] Bioconductor\n tibble               * 3.2.1       2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1       2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0       2022-10-10 [1] CRAN (R 4.3.2)\n tidytree               0.4.6       2023-12-12 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0       2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0       2024-01-18 [1] CRAN (R 4.3.2)\n treeio                 1.26.0      2023-10-24 [1] Bioconductor\n tzdb                   0.4.0       2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4       2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5       2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0       2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42        2024-02-08 [1] CRAN (R 4.3.2)\n XML                    3.99-0.16.1 2024-01-22 [1] CRAN (R 4.3.2)\n xml2                   1.3.6       2023-12-04 [1] CRAN (R 4.3.2)\n XVector                0.42.0      2023-10-24 [1] Bioconductor\n yaml                   2.3.8       2023-12-11 [1] CRAN (R 4.3.2)\n yulab.utils            0.1.4       2024-01-28 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0      2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visual exploration of duplicated genes across the Eukarya tree of life</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_05.html",
    "href": "chapters/chapter_05.html",
    "title": "5  Runtime benchmark",
    "section": "",
    "text": "5.1 Benchmark 1: classify_gene_pairs()\nHere, we will benchmark the performance of classify_gene_pairs() with model organisms.\nFirst, let’s get the genome and annotation data.\n# Create a data frame with names of model species and their Ensembl instances\nmodel_species &lt;- data.frame(\n    species = c(\n        \"arabidopsis_thaliana\", \"caenorhabditis_elegans\", \n        \"homo_sapiens\", \"saccharomyces_cerevisiae\",\n        \"drosophila_melanogaster\", \"danio_rerio\"\n    ),\n    instance = c(\n        \"plants\", \"metazoa\", \"ensembl\", \"fungi\", \"metazoa\", \"ensembl\"\n    )\n)\n\n# For each organism, download data, and identify and classify duplicates\nmodel_duplicates &lt;- lapply(seq_len(nrow(model_species)), function(x) {\n    \n    species &lt;- model_species$species[x]\n    instance &lt;- model_species$instance[x]\n    \n    # Get annotation\n    annot &lt;- get_annotation(model_species[x, ], instance)\n    \n    # Get proteome and keep only primary transcripts\n    seq &lt;- get_proteomes(model_species[x, ], instance)\n    seq &lt;- filter_sequences(seq, annot)\n    \n    # Process data\n    pdata &lt;- syntenet::process_input(seq, annot, filter_annotation = TRUE)\n    \n    # Perform DIAMOND search\n    outdir &lt;- file.path(tempdir(), paste0(species, \"_intra\"))\n    diamond &lt;- syntenet::run_diamond(\n        seq = pdata$seq,\n        compare = \"intraspecies\", \n        outdir = outdir,\n        threads = 4,\n        ... = \"--sensitive\"\n    )\n    \n    fs::dir_delete(outdir)\n    \n    # Classify duplicates - standard mode\n    start &lt;- Sys.time()\n    duplicate_pairs &lt;- classify_gene_pairs(\n            blast_list = diamond,\n            annotation = pdata$annotation,\n            scheme = \"standard\"\n        )[[1]]\n    end &lt;- Sys.time()\n    runtime &lt;- end - start\n    \n    return(runtime)\n})\nnames(model_duplicates) &lt;- gsub(\"_\", \" \", str_to_title(model_species$species))\n\n# Summarize results in a table\nbenchmark_classification &lt;- data.frame(\n    species = names(model_duplicates),\n    time_seconds = as.numeric(unlist(model_duplicates))\n)\n\n# Save results\nsave(\n    benchmark_classification, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"benchmark_classification.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Runtime benchmark</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_05.html#benchmark-2-pairs2kaks",
    "href": "chapters/chapter_05.html#benchmark-2-pairs2kaks",
    "title": "5  Runtime benchmark",
    "section": "5.2 Benchmark 2: pairs2kaks()",
    "text": "5.2 Benchmark 2: pairs2kaks()\nNext, we will benchmark the performance of pairs2kaks() for duplicate pairs in the Saccharomyces cerevisiae genome. We will do it using a single thread, and using parallelization (with 4 and 8 threads).\nFirst of all, let’s get the required data for pairs2kaks().\n\n# Load duplicate pairs for S. cerevisiae\nload(here(\"products\", \"result_files\", \"fungi_duplicates.rda\"))\nscerevisiae_pairs &lt;- fungi_duplicates[\"saccharomyces_cerevisiae\"]\n\n# Get CDS for S. cerevisiae\nscerevisiae_cds &lt;- get_cds_ensembl(\"saccharomyces_cerevisiae\", \"fungi\")\n\nNow, we can do the benchmark.\n\n# Parallel back-end: SerialParam (1 thread)\nstart &lt;- Sys.time()\nkaks &lt;- pairs2kaks(\n    scerevisiae_pairs, \n    scerevisiae_cds,\n    bp_param = BiocParallel::SerialParam()\n)\nend &lt;- Sys.time()\nruntime_serial &lt;- end - start\n\n# Parallel back-end: SnowParam, 4 threads\nstart &lt;- Sys.time()\nkaks &lt;- pairs2kaks(\n    scerevisiae_pairs, \n    scerevisiae_cds,\n    bp_param = BiocParallel::SnowParam(workers = 4)\n)\nend &lt;- Sys.time()\nruntime_snow4 &lt;- end - start\n\n# Parallel back-end: SnowParam, 8 threads\nstart &lt;- Sys.time()\nkaks &lt;- pairs2kaks(\n    scerevisiae_pairs, \n    scerevisiae_cds,\n    bp_param = BiocParallel::SnowParam(workers = 8)\n)\nend &lt;- Sys.time()\nruntime_snow8 &lt;- end - start\n\n# Summarize results in a table\nbenchmark_kaks &lt;- data.frame(\n    `Back-end` = c(\"Serial\", \"Snow, 4 threads\", \"Snow, 8 threads\"),\n    Time_minutes = as.numeric(c(runtime_serial, runtime_snow4, runtime_snow8))\n) |&gt;\n    dplyr::mutate(\n        Pairs_per_minute = nrow(scerevisiae_pairs[[1]]) / Time_minutes,\n        Pairs_per_second = nrow(scerevisiae_pairs[[1]]) / (Time_minutes * 60)\n    )\n\nsave(\n    benchmark_kaks, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"benchmark_kaks.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Runtime benchmark</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_05.html#benchmark-3-doubletrouble-vs-dupgen_finder",
    "href": "chapters/chapter_05.html#benchmark-3-doubletrouble-vs-dupgen_finder",
    "title": "5  Runtime benchmark",
    "section": "5.3 Benchmark 3: doubletrouble vs DupGen_finder",
    "text": "5.3 Benchmark 3: doubletrouble vs DupGen_finder\nHere, we will classify duplicate pairs in the A. thaliana genome using doubletrouble and DupGen_finder to assess if they produce the same results, and compare their runtimes.\nFirst, let’s get all data we need (proteomes, annotation, and DIAMOND tables).\n\n# Get annotation\nsmeta &lt;- data.frame(\n    species = c(\"arabidopsis_thaliana\", \"amborella_trichopoda\"),\n    instance = \"plants\"\n)\nannot &lt;- get_annotation(smeta, \"plants\")\n\n# Get proteome and keep only primary transcripts\nseq &lt;- get_proteomes(smeta, \"plants\")\nseq &lt;- filter_sequences(seq, annot)\n    \n# Process data\npdata &lt;- syntenet::process_input(seq, annot, filter_annotation = TRUE)\n    \n# Run intraspecies DIAMOND search\noutdir &lt;- file.path(tempdir(), \"benchmark3_intra\")\ndiamond_intra &lt;- syntenet::run_diamond(\n    seq = pdata$seq,\n    compare = \"intraspecies\", \n    outdir = outdir,\n    threads = 4,\n    ... = \"--sensitive\"\n)\nfs::dir_delete(outdir)\n\n# Run interspecies DIAMOND search\noutdir2 &lt;- file.path(tempdir(), \"benchmark3_inter\")\ncompare_df &lt;- data.frame(\n    query = \"arabidopsis.thaliana\", target = \"amborella.trichopoda\"\n)\n\ndiamond_inter &lt;- syntenet::run_diamond(\n    seq = pdata$seq,\n    compare = compare_df, \n    outdir = outdir2,\n    threads = 4,\n    ... = \"--sensitive\"\n)\nfs::dir_delete(outdir2)\n\nNow, let’s classify duplicates with doubletrouble.\n\n# Classify duplicates with doubletrouble\nstart1 &lt;- Sys.time()\ndups1 &lt;- classify_gene_pairs(\n    blast_list = diamond_intra[2],\n    annotation = pdata$annotation,\n    blast_inter = diamond_inter,\n    scheme = \"extended\",\n    collinearity_dir = here(\"products\")\n)\nend1 &lt;- Sys.time()\nruntime1 &lt;- end1 - start1\n\nNext, we will classify duplicates with DupGen_finder. For that, we will first export input data in the required format.\n\n# Export data\n## .blast files\nb1 &lt;- diamond_intra$arabidopsis.thaliana_arabidopsis.thaliana |&gt;\n    mutate(\n        query = str_replace_all(query, \"^ara_\", \"\"),\n        db = str_replace_all(db, \"^ara_\", \"\")\n    )\n\nb2 &lt;- diamond_inter$arabidopsis.thaliana_amborella.trichopoda |&gt;\n    mutate(\n        query = str_replace_all(query, \"^ara_\", \"\"),\n        db = str_replace_all(db, \"^amb_\", \"\")\n    )\n\nwrite_tsv(b1, file = file.path(tempdir(), \"Ath.blast\"), col_names = FALSE)\nwrite_tsv(b2, file = file.path(tempdir(), \"Ath_Atr.blast\"), col_names = FALSE)\n\n## .gff files\ngff1 &lt;- pdata$annotation$arabidopsis.thaliana |&gt;\n    as.data.frame() |&gt;\n    mutate(gene = str_replace_all(gene, \"^ara_\", \"\")) |&gt;\n    mutate(seqnames = str_replace_all(seqnames, \"ara_\", \"ara-\")) |&gt;\n    dplyr::select(seqnames, gene, start, end)\n\ngff2 &lt;- pdata$annotation$amborella.trichopoda |&gt;\n    as.data.frame() |&gt;\n    mutate(gene = str_replace_all(gene, \"^amb_\", \"\")) |&gt;\n    mutate(seqnames = str_replace_all(seqnames, \"^amb_\", \"amb-\")) |&gt;\n    dplyr::select(seqnames, gene, start, end)\n\ngff2 &lt;- bind_rows(gff1, gff2)\n\nwrite_tsv(gff1, file = file.path(tempdir(), \"Ath.gff\"), col_names = FALSE)\nwrite_tsv(gff2, file = file.path(tempdir(), \"Ath_Atr.gff\"), col_names = FALSE)\n\n# Classify duplicates with DupGen_finder\nargs = c(\n    \"-i\", tempdir(), \"-t Ath -c Atr\",\n    \"-o\", file.path(tempdir(), \"results\"),\n    \"-e 1e-10\"\n)\n\nstart2 &lt;- Sys.time()\nsystem2(\"DupGen_finder.pl\", args = args)\nend2 &lt;- Sys.time()\nruntime2 &lt;- end2 - start2\n\nNow, let’s compare both algorithms in terms of runtime and results.\n\n# Load `DupGen_finder.pl` results\nfiles &lt;- c(\n    \"Ath.wgd.pairs\", \"Ath.tandem.pairs\", \"Ath.proximal.pairs\",\n    \"Ath.transposed.pairs\", \"Ath.dispersed.pairs\"\n)\nfiles &lt;- file.path(tempdir(), \"results\", files)\nnames(files) &lt;- c(\"SD\", \"TD\", \"PD\", \"TRD\", \"DD\")\ndups2 &lt;- Reduce(rbind, lapply(seq_along(files), function(x) {\n    d &lt;- read_tsv(files[x], show_col_types = FALSE) |&gt;\n        mutate(type = names(files)[x]) |&gt;\n        select(1, 3, type) |&gt;\n        as.data.frame()\n    \n    names(d)[c(1,2)] &lt;- c(\"dup1\", \"dup2\")\n    \n    return(d)\n}))\n\n# Compare runtime\ncomp_runtime &lt;- data.frame(doubletrouble = runtime1, DupGen_finder = runtime2)\n\n# Compare number of gene pairs per category\ncomp_results &lt;- inner_join(\n    count(dups1$arabidopsis.thaliana, type) |&gt; \n        dplyr::rename(n_doubletrouble = n),\n    count(dups2, type) |&gt;\n        dplyr::rename(n_DupGen_finder = n),\n    by = \"type\"\n)\ncomp_results &lt;- bind_rows(\n    comp_results, \n    data.frame(\n        type = \"Total\", \n        n_doubletrouble = sum(comp_results$n_doubletrouble),\n        n_DupGen_finder = sum(comp_results$n_DupGen_finder)\n    )\n)\n\n\nlist(runtime = comp_runtime, results = comp_results)\n\n$runtime\n  doubletrouble DupGen_finder\n1  3.71474 secs 3.373682 secs\n\n$results\n   type n_doubletrouble n_DupGen_finder\n1    SD            4329            4355\n2    TD            2075            2131\n3    PD            2789             896\n4   TRD            6703            5941\n5    DD           31589           17834\n6 Total           47485           31157\n\n\nOverall, results are similar, but there are important differences. In terms of runtime, there is no significant difference (this is the runtime of a single run, so there’s some stochasticity). In terms of results, the numbers of SD, TD, and TRD pairs are similar, but there are more pronounced differences for PD and DD pairs. In particular, the total number of paralogous pairs differs between algorithms. When we remove rows from the DIAMOND output based on the E-value threshold and remove self (e.g., “gene1-gene1”) and redundant hits (e.g., “gene1-gene2” and “gene2-gene1”), we get the following total number of pairs:\n\n# Get total number of paralog pairs from DIAMOND output\nevalue &lt;- 1e-10\ndmd &lt;- diamond_intra$arabidopsis.thaliana_arabidopsis.thaliana\n\nall_paralogs &lt;- lapply(list(dmd), function(x) {\n    fpair &lt;- x[x$evalue &lt;= evalue, c(1, 2)]\n    fpair &lt;- fpair[fpair[, 1] != fpair[, 2], ]\n    fpair &lt;- fpair[!duplicated(t(apply(fpair, 1, sort))), ]\n    names(fpair) &lt;- c(\"dup1\", \"dup2\")\n    return(fpair)\n})[[1]]\n\n\nnrow(all_paralogs)\n\n[1] 47485\n\n\nThe total number of paralogous pairs in the DIAMOND output is the same as sum of classes for doubletrouble, but greater than the sum of classes for DupGen_finder, indicating that the latter probably does some additional (undocumented) filtering before classifying gene pairs, or it could be a bug.\nFinally, since the number of PD pairs identified by doubletrouble is much greater than the number of PD pairs identified by DupGen_finder, we will explore a few of these PD pairs so check whether doubletrouble misclassified them.\n\npd1 &lt;- dups1$arabidopsis.thaliana |&gt;\n    filter(type == \"PD\")\n\npd2 &lt;- dups2 |&gt;\n    filter(type == \"PD\")\n\n# Get all pairs in `pd1` and `pd2`\np1 &lt;- t(apply(pd1[, 1:2], 1, sort)) |&gt;\n    as.data.frame() |&gt;\n    mutate(V1 = str_replace_all(V1, \"^ara_\", \"\")) |&gt;\n    mutate(V2 = str_replace_all(V2, \"^ara_\", \"\")) |&gt;\n    mutate(pair_string = str_c(V1, V2, sep = \"-\")) |&gt;\n    pull(pair_string)\n\np2 &lt;- t(apply(pd2[, 1:2], 1, sort)) |&gt;\n    as.data.frame() |&gt;\n    mutate(pair_string = str_c(V1, V2, sep = \"-\")) |&gt;\n    pull(pair_string)\n\n# Sample PD pairs from doubletrouble that are not PD pairs in DupGen_finder\nexamples &lt;- p1[!p1 %in% p2] |&gt; head(n = 5)\n\n# Check whether they are PD pairs or not\nath_annot &lt;- pdata$annotation$arabidopsis.thaliana\nrange_examples &lt;- lapply(examples, function(x) {\n    g1 &lt;- paste0(\"ara_\", strsplit(x, \"-\")[[1]][1])\n    g2 &lt;- paste0(\"ara_\", strsplit(x, \"-\")[[1]][2])\n    ranges &lt;- ath_annot[ath_annot$gene %in% c(g1, g2)]\n    return(ranges)\n})\n\n\nrange_examples\n\n[[1]]\nGRanges object with 2 ranges and 1 metadata column:\n      seqnames        ranges strand |          gene\n         &lt;Rle&gt;     &lt;IRanges&gt;  &lt;Rle&gt; |   &lt;character&gt;\n  128    ara_1 428650-430720      - | ara_AT1G02220\n  130    ara_1 437860-439559      - | ara_AT1G02250\n  -------\n  seqinfo: 7 sequences from an unspecified genome; no seqlengths\n\n[[2]]\nGRanges object with 2 ranges and 1 metadata column:\n      seqnames        ranges strand |          gene\n         &lt;Rle&gt;     &lt;IRanges&gt;  &lt;Rle&gt; |   &lt;character&gt;\n  127    ara_1 427548-427811      - | ara_AT1G02210\n  130    ara_1 437860-439559      - | ara_AT1G02250\n  -------\n  seqinfo: 7 sequences from an unspecified genome; no seqlengths\n\n[[3]]\nGRanges object with 2 ranges and 1 metadata column:\n        seqnames        ranges strand |          gene\n           &lt;Rle&gt;     &lt;IRanges&gt;  &lt;Rle&gt; |   &lt;character&gt;\n  17117    ara_4 656407-659178      - | ara_AT4G01520\n  17120    ara_4 673862-676445      - | ara_AT4G01550\n  -------\n  seqinfo: 7 sequences from an unspecified genome; no seqlengths\n\n[[4]]\nGRanges object with 2 ranges and 1 metadata column:\n        seqnames            ranges strand |          gene\n           &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; |   &lt;character&gt;\n  15329    ara_3 17882465-17884515      + | ara_AT3G48290\n  15332    ara_3 17887996-17889942      + | ara_AT3G48310\n  -------\n  seqinfo: 7 sequences from an unspecified genome; no seqlengths\n\n[[5]]\nGRanges object with 2 ranges and 1 metadata column:\n        seqnames            ranges strand |          gene\n           &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; |   &lt;character&gt;\n  25845    ara_5 21378702-21379744      + | ara_AT5G52720\n  25847    ara_5 21382482-21383432      + | ara_AT5G52740\n  -------\n  seqinfo: 7 sequences from an unspecified genome; no seqlengths\n\n\nIn these first five examples of pairs that are classified as PD pairs by doubletrouble, but not by DupGen_finder, we can see based on the numbers in row names that they are indeed very close, separated by only a few genes (&lt;10). Thus, they are true PD pairs that DupGen_finder failed to classify as PD pairs, or removed in their undocumented filtering (described above).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Runtime benchmark</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_05.html#session-info",
    "href": "chapters/chapter_05.html#session-info",
    "title": "5  Runtime benchmark",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-04-18\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version     date (UTC) lib source\n abind                  1.4-5       2016-07-21 [1] CRAN (R 4.3.2)\n ade4                   1.7-22      2023-02-06 [1] CRAN (R 4.3.2)\n AnnotationDbi          1.64.1      2023-11-03 [1] Bioconductor\n ape                    5.7-1       2023-03-13 [1] CRAN (R 4.3.2)\n Biobase                2.62.0      2023-10-24 [1] Bioconductor\n BiocFileCache          2.10.1      2023-10-26 [1] Bioconductor\n BiocGenerics           0.48.1      2023-11-01 [1] Bioconductor\n BiocIO                 1.12.0      2023-10-24 [1] Bioconductor\n BiocParallel           1.37.0      2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n biomaRt                2.58.2      2024-01-30 [1] Bioconductor 3.18 (R 4.3.2)\n Biostrings             2.70.2      2024-01-28 [1] Bioconductor 3.18 (R 4.3.2)\n bit                    4.0.5       2022-11-15 [1] CRAN (R 4.3.2)\n bit64                  4.0.5       2020-08-30 [1] CRAN (R 4.3.2)\n bitops                 1.0-7       2021-04-24 [1] CRAN (R 4.3.2)\n blob                   1.2.4       2023-03-17 [1] CRAN (R 4.3.2)\n cachem                 1.0.8       2023-05-01 [1] CRAN (R 4.3.2)\n cli                    3.6.2       2023-12-11 [1] CRAN (R 4.3.2)\n coda                   0.19-4.1    2024-01-31 [1] CRAN (R 4.3.2)\n codetools              0.2-19      2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0       2023-01-23 [1] CRAN (R 4.3.2)\n crayon                 1.5.2       2022-09-29 [1] CRAN (R 4.3.2)\n curl                   5.2.0       2023-12-08 [1] CRAN (R 4.3.2)\n DBI                    1.2.1       2024-01-12 [1] CRAN (R 4.3.2)\n dbplyr                 2.4.0       2023-10-26 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0      2023-10-24 [1] Bioconductor\n digest                 0.6.34      2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17      2022-02-07 [1] CRAN (R 4.3.2)\n doubletrouble        * 1.3.4       2024-02-05 [1] Bioconductor\n dplyr                * 1.1.4       2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23        2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6       2023-12-08 [1] CRAN (R 4.3.2)\n fastmap                1.1.1       2023-02-24 [1] CRAN (R 4.3.2)\n filelock               1.0.3       2023-12-11 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0       2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2       2022-02-02 [1] CRAN (R 4.3.2)\n generics               0.1.3       2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb           1.38.6      2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11      2023-12-21 [1] Bioconductor\n GenomicAlignments      1.38.2      2024-01-16 [1] Bioconductor 3.18 (R 4.3.2)\n GenomicFeatures        1.54.3      2024-01-31 [1] Bioconductor 3.18 (R 4.3.2)\n GenomicRanges          1.54.1      2023-10-29 [1] Bioconductor\n ggnetwork              0.5.13      2024-02-14 [1] CRAN (R 4.3.2)\n ggplot2              * 3.5.0       2024-02-23 [1] CRAN (R 4.3.2)\n glue                   1.7.0       2024-01-09 [1] CRAN (R 4.3.2)\n gtable                 0.3.4       2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1       2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3       2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7       2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4       2023-12-06 [1] CRAN (R 4.3.2)\n httr                   1.4.7       2023-08-15 [1] CRAN (R 4.3.2)\n igraph                 2.0.1.1     2024-01-30 [1] CRAN (R 4.3.2)\n intergraph             2.0-4       2024-02-01 [1] CRAN (R 4.3.2)\n IRanges                2.36.0      2023-10-24 [1] Bioconductor\n iterators              1.0.14      2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8       2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST               1.42.0      2023-10-24 [1] Bioconductor\n knitr                  1.45        2023-10-30 [1] CRAN (R 4.3.2)\n lattice                0.22-5      2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4       2023-11-07 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3       2023-09-27 [1] CRAN (R 4.3.2)\n magrittr               2.0.3       2022-03-30 [1] CRAN (R 4.3.2)\n MASS                   7.3-60      2023-05-04 [4] CRAN (R 4.3.1)\n Matrix                 1.6-3       2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics         1.14.0      2023-10-24 [1] Bioconductor\n matrixStats            1.2.0       2023-12-11 [1] CRAN (R 4.3.2)\n mclust                 6.0.1       2023-11-15 [1] CRAN (R 4.3.2)\n memoise                2.0.1       2021-11-26 [1] CRAN (R 4.3.2)\n MSA2dist               1.7.3       2024-03-14 [1] gitlab (mpievolbio-it/msa2dist@7558ab2)\n munsell                0.5.0       2018-06-12 [1] CRAN (R 4.3.2)\n network                1.18.2      2023-12-05 [1] CRAN (R 4.3.2)\n networkD3              0.4         2017-03-18 [1] CRAN (R 4.3.2)\n nlme                   3.1-163     2023-08-09 [4] CRAN (R 4.3.1)\n patchwork            * 1.2.0       2024-01-08 [1] CRAN (R 4.3.2)\n pheatmap               1.0.12      2019-01-04 [1] CRAN (R 4.3.2)\n pillar                 1.9.0       2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3       2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8       2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits            1.2.0       2023-09-24 [1] CRAN (R 4.3.2)\n progress               1.2.3       2023-12-06 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2       2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1       2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs               0.3.3       2021-01-31 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3       2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12      2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14   2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5       2024-01-10 [1] CRAN (R 4.3.2)\n restfulr               0.0.15      2022-06-16 [1] CRAN (R 4.3.2)\n rjson                  0.2.21      2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3       2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25        2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4       2023-11-05 [1] CRAN (R 4.3.2)\n Rsamtools              2.18.0      2023-10-24 [1] Bioconductor\n RSQLite                2.3.5       2024-01-21 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0      2023-07-07 [1] CRAN (R 4.3.2)\n rtracklayer            1.62.0      2023-10-24 [1] Bioconductor\n S4Arrays               1.2.0       2023-10-24 [1] Bioconductor\n S4Vectors              0.40.2      2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0       2023-11-28 [1] CRAN (R 4.3.2)\n seqinr                 4.2-36      2023-12-08 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2       2021-12-06 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4       2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n statnet.common         4.9.0       2023-05-24 [1] CRAN (R 4.3.2)\n stringi                1.8.3       2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1       2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment   1.32.0      2023-10-24 [1] Bioconductor\n syntenet               1.4.0       2023-10-24 [1] Bioconductor\n tibble               * 3.2.1       2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1       2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0       2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0       2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0       2024-01-18 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0       2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4       2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5       2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0       2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42        2024-02-08 [1] CRAN (R 4.3.2)\n XML                    3.99-0.16.1 2024-01-22 [1] CRAN (R 4.3.2)\n xml2                   1.3.6       2023-12-04 [1] CRAN (R 4.3.2)\n XVector                0.42.0      2023-10-24 [1] Bioconductor\n yaml                   2.3.8       2023-12-11 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0      2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Runtime benchmark</span>"
    ]
  },
  {
    "objectID": "chapters/appendices.html",
    "href": "chapters/appendices.html",
    "title": "Appendices",
    "section": "",
    "text": "In the main chapters, we used other pieces of code that are stored in separate R scripts for better readability. They can be found in the code/ directory of the GitHub repo associated with this book.",
    "crumbs": [
      "Appendices"
    ]
  }
]