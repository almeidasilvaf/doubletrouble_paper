{
  "hash": "ddcdce37196c0b49937529201bdb3ba7",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Runtime benchmark\n\nHere, we will perform a runtime benchmark for functions related to duplicate \nclassification and substitution rates calculation using model organisms.\n\nTo start, let's load the required data and packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load required packages\nlibrary(doubletrouble)\nlibrary(here)\nlibrary(tidyverse)\nlibrary(patchwork)\n\nsource(here(\"code\", \"utils.R\"))\n\n# Load sample metadata for Ensembl instances\nload(here(\"products\", \"result_files\", \"metadata_all.rda\"))\n```\n:::\n\n\n## Benchmark 1: `classify_gene_pairs()`\n\nHere, we will benchmark the performance of `classify_gene_pairs()`\nwith model organisms.\n\nFirst, let's get the genome and annotation data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame with names of model species and their Ensembl instances\nmodel_species <- data.frame(\n    species = c(\n        \"arabidopsis_thaliana\", \"caenorhabditis_elegans\", \n        \"homo_sapiens\", \"saccharomyces_cerevisiae\",\n        \"drosophila_melanogaster\", \"danio_rerio\"\n    ),\n    instance = c(\n        \"plants\", \"metazoa\", \"ensembl\", \"fungi\", \"metazoa\", \"ensembl\"\n    )\n)\n\n# For each organism, download data, and identify and classify duplicates\nmodel_duplicates <- lapply(seq_len(nrow(model_species)), function(x) {\n    \n    species <- model_species$species[x]\n    instance <- model_species$instance[x]\n    \n    # Get annotation\n    annot <- get_annotation(model_species[x, ], instance)\n    \n    # Get proteome and keep only primary transcripts\n    seq <- get_proteomes(model_species[x, ], instance)\n    seq <- filter_sequences(seq, annot)\n    \n    # Process data\n    pdata <- syntenet::process_input(seq, annot, filter_annotation = TRUE)\n    \n    # Perform DIAMOND search\n    outdir <- file.path(tempdir(), paste0(species, \"_intra\"))\n    diamond <- syntenet::run_diamond(\n        seq = pdata$seq,\n        compare = \"intraspecies\", \n        outdir = outdir,\n        threads = 4,\n        ... = \"--sensitive\"\n    )\n    \n    fs::dir_delete(outdir)\n    \n    # Classify duplicates - standard mode\n    start <- Sys.time()\n    duplicate_pairs <- classify_gene_pairs(\n            blast_list = diamond,\n            annotation = pdata$annotation,\n            scheme = \"standard\"\n        )[[1]]\n    end <- Sys.time()\n    runtime <- end - start\n    \n    return(runtime)\n})\nnames(model_duplicates) <- gsub(\"_\", \" \", str_to_title(model_species$species))\n\n# Summarize results in a table\nbenchmark_classification <- data.frame(\n    species = names(model_duplicates),\n    time_seconds = as.numeric(unlist(model_duplicates))\n)\n\n# Save results\nsave(\n    benchmark_classification, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"benchmark_classification.rda\")\n)\n```\n:::\n\n\n## Benchmark 2: `pairs2kaks()`\n\nNext, we will benchmark the performance of `pairs2kaks()` for\nduplicate pairs in the *Saccharomyces cerevisiae* genome.\nWe will do it using a single thread, and using parallelization (with\n4 and 8 threads).\n\nFirst of all, let's get the required data for `pairs2kaks()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load duplicate pairs for S. cerevisiae\nload(here(\"products\", \"result_files\", \"fungi_duplicates.rda\"))\nscerevisiae_pairs <- fungi_duplicates[\"saccharomyces_cerevisiae\"]\n\n# Get CDS for S. cerevisiae\nscerevisiae_cds <- get_cds_ensembl(\"saccharomyces_cerevisiae\", \"fungi\")\n```\n:::\n\n\nNow, we can do the benchmark. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parallel back-end: SerialParam (1 thread)\nstart <- Sys.time()\nkaks <- pairs2kaks(\n    scerevisiae_pairs, \n    scerevisiae_cds,\n    bp_param = BiocParallel::SerialParam()\n)\nend <- Sys.time()\nruntime_serial <- end - start\n\n# Parallel back-end: SnowParam, 4 threads\nstart <- Sys.time()\nkaks <- pairs2kaks(\n    scerevisiae_pairs, \n    scerevisiae_cds,\n    bp_param = BiocParallel::SnowParam(workers = 4)\n)\nend <- Sys.time()\nruntime_snow4 <- end - start\n\n# Parallel back-end: SnowParam, 8 threads\nstart <- Sys.time()\nkaks <- pairs2kaks(\n    scerevisiae_pairs, \n    scerevisiae_cds,\n    bp_param = BiocParallel::SnowParam(workers = 8)\n)\nend <- Sys.time()\nruntime_snow8 <- end - start\n\n# Summarize results in a table\nbenchmark_kaks <- data.frame(\n    `Back-end` = c(\"Serial\", \"Snow, 4 threads\", \"Snow, 8 threads\"),\n    Time_minutes = as.numeric(c(runtime_serial, runtime_snow4, runtime_snow8))\n) |>\n    dplyr::mutate(\n        Pairs_per_minute = nrow(scerevisiae_pairs[[1]]) / Time_minutes,\n        Pairs_per_second = nrow(scerevisiae_pairs[[1]]) / (Time_minutes * 60)\n    )\n\nsave(\n    benchmark_kaks, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"benchmark_kaks.rda\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-12\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n ade4                   1.7-22    2023-02-06 [1] CRAN (R 4.3.2)\n AnnotationDbi          1.64.1    2023-11-03 [1] Bioconductor\n ape                    5.7-1     2023-03-13 [1] CRAN (R 4.3.2)\n Biobase                2.62.0    2023-10-24 [1] Bioconductor\n BiocFileCache          2.10.1    2023-10-26 [1] Bioconductor\n BiocGenerics           0.48.1    2023-11-01 [1] Bioconductor\n BiocIO                 1.12.0    2023-10-24 [1] Bioconductor\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n biomaRt                2.58.0    2023-10-24 [1] Bioconductor\n Biostrings             2.70.1    2023-10-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.2)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.2)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n curl                   5.2.0     2023-12-08 [1] CRAN (R 4.3.2)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.2)\n dbplyr                 2.4.0     2023-10-26 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n doubletrouble        * 1.3.4     2024-02-05 [1] Bioconductor\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n filelock               1.0.3     2023-12-11 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb           1.38.2    2023-12-13 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicAlignments      1.38.0    2023-10-24 [1] Bioconductor\n GenomicFeatures        1.54.1    2023-10-29 [1] Bioconductor\n GenomicRanges          1.54.1    2023-10-29 [1] Bioconductor\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4     2023-10-12 [1] CRAN (R 4.3.2)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n httr                   1.4.7     2023-08-15 [1] CRAN (R 4.3.2)\n igraph                 2.0.1.1   2024-01-30 [1] CRAN (R 4.3.2)\n intergraph             2.0-3     2023-08-20 [1] CRAN (R 4.3.2)\n IRanges                2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST               1.42.0    2023-10-24 [1] Bioconductor\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n MASS                   7.3-60    2023-05-04 [4] CRAN (R 4.3.1)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics         1.14.0    2023-10-24 [1] Bioconductor\n matrixStats            1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n mclust                 6.0.1     2023-11-15 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n MSA2dist               1.6.0     2023-10-24 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n network                1.18.2    2023-12-05 [1] CRAN (R 4.3.2)\n networkD3              0.4       2017-03-18 [1] CRAN (R 4.3.2)\n nlme                   3.1-163   2023-08-09 [4] CRAN (R 4.3.1)\n patchwork            * 1.2.0     2024-01-08 [1] CRAN (R 4.3.2)\n pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits            1.2.0     2023-09-24 [1] CRAN (R 4.3.2)\n progress               1.2.3     2023-12-06 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.11    2023-07-06 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.13 2023-11-02 [1] CRAN (R 4.3.2)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.2)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.2     2023-11-04 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n Rsamtools              2.18.0    2023-10-24 [1] Bioconductor\n RSQLite                2.3.4     2023-12-08 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n rtracklayer            1.62.0    2023-10-24 [1] Bioconductor\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors              0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n seqinr                 4.2-36    2023-12-08 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n SparseArray            1.2.2     2023-11-07 [1] Bioconductor\n statnet.common         4.9.0     2023-05-24 [1] CRAN (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment   1.32.0    2023-10-24 [1] Bioconductor\n syntenet               1.4.0     2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  2.5.2     2023-10-30 [1] CRAN (R 4.3.2)\n xfun                   0.41      2023-11-01 [1] CRAN (R 4.3.2)\n XML                    3.99-0.16 2023-11-29 [1] CRAN (R 4.3.2)\n xml2                   1.3.6     2023-12-04 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}