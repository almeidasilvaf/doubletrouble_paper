{
  "hash": "1e471b4d51c8e32ed537c2c799c967c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Identification and classification of duplicated genes in Ensembl and Ensembl Genomes\n\nHere, we will describe the code to identify and classify duplicated genes\nin Ensembl and Ensembl Genomes species using the Bioconductor package \n*[doubletrouble](https://bioconductor.org/packages/3.18/doubletrouble)*. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(syntenet)\nlibrary(doubletrouble)\nlibrary(biomaRt)\nlibrary(here)\nlibrary(tidyverse)\n\nset.seed(123) # for reproducibility\noptions(timeout = 1e10) # to allow download of big files\n\n# Load helper functions\nsource(here(\"code\", \"utils.R\"))\n```\n:::\n\n\n## Data loading: species trees and metadata\n\nHere, we will load the data frames of species metadata and `phylo` objects\nwith species trees for each Ensembl instance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load metadata\nload(here(\"products\", \"result_files\", \"metadata_all.rda\"))\nnames(metadata_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"fungi\"    \"plants\"   \"metazoa\"  \"protists\" \"ensembl\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# Load trees\nload(here(\"products\", \"result_files\", \"trees\", \"fungi_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"plants_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"metazoa_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"vertebrates_busco_trees.rda\"))\nload(here(\"products\", \"result_files\", \"trees\", \"protists_busco_trees.rda\"))\n```\n:::\n\n\n## Identification and classification of duplicated genes in Ensembl and Ensembl Genomes\n\nNow, let's use *[doubletrouble](https://bioconductor.org/packages/3.18/doubletrouble)* to\nidentify duplicated genes and classify them using the Ensembl and \nEnsembl Genomes data sets. Here, to avoid code repetition and optimize\nmemory usage, we will use the wrapper function `ensembl2duplicates()` (in\nthe file *utils.R*). For each species in the metadata data frame,\nthis function:\n\n1. Retrieves whole-genome protein sequences (`AAStringSet`) and\ngene annotation (`GRanges`) from an Ensembl instance;\n\n2. Filters the `AAStringSet` object to include only the longest protein\nfor each gene (i.e., the translated sequence of the primary transcript);\n\n3. Processes the sequences and annotation with `syntenet::process_input()`;\n\n4. Identifies the paranome with `syntenet::run_diamond()` +\nidentifies orthologs between the query species and an outgroup (optional);\n\n5. Classifies paralogs by duplication modes.\n\n\n### Ensembl Fungi\n\nFirst, let's create a data frame with species and their outgroups.\nHere, we will use the basidiomycete *Cryptococcus neoformans* as outgroup\nfor Ascomycota species, and the oomycete *Aphanomyces astaci* as outgroup for\nBasidiomycota species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_dir <- here(\"products\", \"result_files\", \"collinearity\", \"fungi\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Create data frame of query species and outgroup\nfungi_outgroups <- metadata_all$fungi |>\n    filter(phylum != \"Oomycota\") |>\n    mutate(\n        query = species,\n        outgroup = case_when(\n            phylum == \"Ascomycota\" ~ \"cryptococcus_neoformans\",\n            TRUE ~ \"aphanomyces_astaci\"\n        )\n    ) |>\n    select(query, outgroup)\n\n# Identifying and classifying paralogs\nfungi_duplicates <- ensembl2duplicates(\n    metadata_all$fungi, ensembl = \"fungi\", \n    outgroups = fungi_outgroups,\n    collinearity_dir = col_dir\n)\n\n# Classify genes into unique duplication modes\nfungi_duplicates_unique <- classify_genes(fungi_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    fungi_duplicates,\n    file = here(\"products\", \"result_files\", \"fungi_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    fungi_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"fungi_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n```\n:::\n\n\n### Ensembl Protists\n\nSince protists are not a real (i.e., monophyletic) group, defining\nan outgroup species is very problematic. For this reason, we will classify\nduplicates using the *standard* classification scheme here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_dir <- here(\"products\", \"result_files\", \"collinearity\", \"protists\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nprotists_duplicates <- ensembl2duplicates(\n    metadata_all$protists, ensembl = \"protists\", collinearity_dir = col_dir\n)\n\n# Classify genes into unique duplication modes\nprotists_duplicates_unique <- classify_genes(protists_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    protists_duplicates,\n    file = here(\"products\", \"result_files\", \"protists_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    protists_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"protists_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n```\n:::\n\n\n\n### Ensembl Plants\n\nHere, we will use different outgroups for different branches of the tree.\nThe clades and outgroups are:\n\n1. Angiosperms: *Amborella trichopoda* as outgroup.\n\n2. *Amborella trichopoda* and *Nymphaea colorata*: *Chara braunii* as outgroup.\n\n3. *Selaginella moellendorffii*, *Chara braunii*, \n*Marchantia polymorpha*, *Physcomitrium patens*: \n*Chlamydomonas reinhardtii* as outgroup.\n\n4. *Chlamydomonas reinhardtii* and *Ostreococcus lucimarinus*: \n*Galdieria sulphuraria* as outgroup\n\n5. Rhodophyta algae: no outgroup. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data frame of query species and outgroup\nangiosperms <- metadata_all$plants |>\n    filter(\n        phylum == \"Streptophyta\",\n        !order %in% c(\n            \"Charales\", \"Selaginellales\", \"Funariales\", \n            \"Marchantiales\", \"Nymphaeales\"\n        )\n    ) |>\n    pull(species)\n\nana <- c(\"amborella_trichopoda\", \"nymphaea_colorata\")\nbryophytes <- c(\n    \"selaginella_moellendorffii\", \"chara_braunii\", \n    \"marchantia_polymorpha\", \"physcomitrium_patens\"\n)\nchlorophyta <- c(\"chlamydomonas_reinhardtii\", \"ostreococcus_lucimarinus\")\n\nplants_outgroups <- metadata_all$plants |>\n    filter(phylum != \"Rhodophyta\") |>\n    mutate(\n        query = species,\n        outgroup = case_when(\n            species %in% angiosperms ~ \"amborella_trichopoda\",\n            species %in% ana ~ \"chara_braunii\",\n            species %in% bryophytes ~ \"chlamydomonas_reinhardtii\",\n            species %in% chlorophyta ~ \"galdieria_sulphuraria\"\n        )\n    ) |>\n    select(query, outgroup)\n```\n:::\n\n\nIdentifying and classifying duplicates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_dir <- here(\"products\", \"result_files\", \"collinearity\", \"plants\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nplants_duplicates <- ensembl2duplicates(\n    metadata_all$plants, ensembl = \"plants\", \n    outgroups = plants_outgroups, \n    collinearity_dir = col_dir, \n    threads = 4\n)\n\n# Classify genes into unique duplication modes\nplants_duplicates_unique <- classify_genes(plants_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    plants_duplicates,\n    file = here(\"products\", \"result_files\", \"plants_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    plants_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"plants_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n```\n:::\n\n\n### Ensembl Metazoa\n\nHere, we will use different outgroups for different branches of the tree.\nThe clades and outgroups are:\n\n1. Arthropoda: *Hypsibius exemplaris* (Tardigrada) as outgroup.\n\n2. Tardigrada, Acanthocephala, and Rotifera: *Brugia malayi* (Nematoda) \nas outgroup.\n\n3. Nematoda: *Priapulus caudatus* (Priapulida) as outgroup\n\n4. Priapulida, Echinodermata, Chordata, and \nHemichordata: *Hofstenia miamia* (Xenacoelomorpha) as outgroup.\n\n5. Xenacoelomorpha: *Actinia tenebrosa* (Cnidaria) as outgroup.\n\n6. Cnidaria and Placozoa: *Amphimedon queenslandica* (Porifera) as outgroup.\n\n7. Porifera: *Mnemiopsis leidyi* (Ctenophora) as outgroup.\n\n8. Brachiopoda: *Haliotis rufescens* (Mollusca) as outgroup.\n\n9. Mollusca, Annelida, and Platyhelminthes: *Adineta vaga* (Rotifera)\nas outgroup.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data frame of query species and outgroup\nby_phylum <- function(df, taxon) {\n    return(\n        df |> \n            dplyr::filter(phylum == taxon) |> \n            dplyr::pull(species)\n    )\n}\n\narthropoda <- by_phylum(metadata_all$metazoa, \"Arthropoda\")\ntardigrada <- by_phylum(metadata_all$metazoa, \"Tardigrada\")\nnematoda <- by_phylum(metadata_all$metazoa, \"Nematoda\")\npriapulida <- by_phylum(metadata_all$metazoa, \"Priapulida\")\nxenacoelomorpha <- by_phylum(metadata_all$metazoa, \"Xenacoelomorpha\")\ncnidaria <- by_phylum(metadata_all$metazoa, \"Cnidaria\")\nplacozoa <- by_phylum(metadata_all$metazoa, \"Placozoa\")\nporifera <- by_phylum(metadata_all$metazoa, \"Porifera\")\nbrachiopoda <- by_phylum(metadata_all$metazoa, \"Brachiopoda\")\nmollusca <- by_phylum(metadata_all$metazoa, \"Mollusca\")\nechinodermata <- by_phylum(metadata_all$metazoa, \"Echinodermata\")\nannelida <- by_phylum(metadata_all$metazoa, \"Annelida\")\nplatyhelminthes <- by_phylum(metadata_all$metazoa, \"Platyhelminthes\")\nacanthocephala <- by_phylum(metadata_all$metazoa, \"Acanthocephala\")\nchordata <- by_phylum(metadata_all$metazoa, \"Chordata\")\nhemichordata <- by_phylum(metadata_all$metazoa, \"Hemichordata\")\nrotifera <- by_phylum(metadata_all$metazoa, \"Rotifera\")\n\nmetazoa_outgroups <- metadata_all$metazoa |>\n    filter(phylum != \"Ctenophora\") |>\n    mutate(\n        query = species,\n        outgroup = case_when(\n            species %in% arthropoda ~ \"hypsibius_exemplaris_gca002082055v1\",\n            species %in% c(tardigrada, acanthocephala, rotifera) ~ \"brugia_malayi\",\n            species %in% nematoda ~ \"priapulus_caudatus_gca000485595v2\",\n            \n            species %in% c(priapulida, echinodermata, chordata, hemichordata) ~\n                \"hofstenia_miamia\",\n            species %in% xenacoelomorpha ~ \"actinia_tenebrosa_gca009602425v1\",\n            species %in% c(cnidaria, placozoa) ~\n                \"amphimedon_queenslandica_gca000090795v2rs\",\n            species %in% porifera ~ \"mnemiopsis_leidyi\",\n            species %in% brachiopoda ~ \"haliotis_rufescens_gca023055435v1rs\",\n            species %in% c(mollusca, annelida, platyhelminthes) ~ \"adineta_vaga\"\n        )\n    ) |>\n    select(query, outgroup)\n```\n:::\n\n\nIdentifying and classifying duplicates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_dir <- here(\"products\", \"result_files\", \"collinearity\", \"metazoa\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nmetazoa_duplicates <- ensembl2duplicates(\n    metadata = metadata_all$metazoa, \n    ensembl = \"metazoa\", \n    outgroups = metazoa_outgroups, \n    collinearity_dir = col_dir, \n    threads = 4\n)\n\n# Classify genes into unique duplication modes\nmetazoa_duplicates_unique <- classify_genes(metazoa_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    metazoa_duplicates,\n    file = here(\"products\", \"result_files\", \"metazoa_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    metazoa_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"metazoa_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n```\n:::\n\n\n\n### Ensembl (Vertebrates)\n\nHere, we will use the following outgroups per taxa:\n\n1. Amniota: *Xenopus tropicalis* (Amphibia) as outgroup;\n2. Amphibia: *Latimeria chalumnae* (West Indian Ocean coelacanth)\n3. All bony and cartilaginous fish: *Eptatretus burgeri* (hagfish, Agnatha)\n4. Agnatha: *Ciona intestinalis* (Tunicata)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a data frame of species and outgroups\namniota <- metadata_all$ensembl |>\n    filter(\n        class %in% c(\"Aves\", \"Mammalia\", \"Lepidosauria\") | \n            order %in% c(\"Testudines\", \"Crocodylia\")\n    ) |>\n    pull(species)\n\namphibia <- metadata_all$ensembl |>\n    filter(class == \"Amphibia\") |> \n    pull(species)\n\nfish <- metadata_all$ensembl |>\n    filter(\n        class %in% c(\"Actinopteri\", \"Chondrichthyes\", \"Cladistia\") | \n            order == \"Coelacanthiformes\"\n    ) |>\n    pull(species)\n\nagnatha <- metadata_all$ensembl |>\n    filter(\n        class %in% c(\"Myxini\", \"Hyperoartia\")\n    ) |>\n    pull(species)\n\nensembl_outgroups <- metadata_all$ensembl |>\n    filter(!phylum %in% c(\"Nematoda\", \"Arthropoda\", \"Ascomycota\")) |>\n    mutate(\n        query = species,\n        outgroup = case_when(\n            species %in% amniota ~ \"xenopus_tropicalis\",\n            species %in% amphibia ~ \"latimeria_chalumnae\",\n            species %in% fish ~ \"eptatretus_burgeri\",\n            species %in% agnatha ~ \"ciona_intestinalis\"\n        )\n    ) |>\n    select(query, outgroup) |>\n    filter(!is.na(outgroup))\n```\n:::\n\n\nIdentifying and classifying duplicates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_dir <- here(\"products\", \"result_files\", \"collinearity\", \"vertebrates\")\nif(!dir.exists(col_dir)) { dir.create(col_dir, recursive = TRUE) }\n\n# Identifying and classifying paralogs\nvertebrates_duplicates <- ensembl2duplicates(\n    meta, \n    ensembl = \"ensembl\", \n    outgroups = ensembl_outgroups, \n    collinearity_dir = col_dir, \n    tsv_dir = \"~/Documents/vertebrates_duplicates\", # delete later\n    threads = 4\n)\n\n# Classify genes into unique duplication modes\nvertebrates_duplicates_unique <- classify_genes(vertebrates_duplicates)\n\n# Save classification results\n## Duplicate pairs\nsave(\n    vertebrates_duplicates,\n    file = here(\"products\", \"result_files\", \"vertebrates_duplicates.rda\"),\n    compress = \"xz\"\n)\n\n## Duplicated genes (unique duplication modes)\nsave(\n    vertebrates_duplicates_unique,\n    file = here(\"products\", \"result_files\", \"vertebrates_duplicates_unique.rda\"),\n    compress = \"xz\"\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-12\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n ade4                   1.7-22    2023-02-06 [1] CRAN (R 4.3.2)\n AnnotationDbi          1.64.1    2023-11-03 [1] Bioconductor\n ape                    5.7-1     2023-03-13 [1] CRAN (R 4.3.2)\n Biobase                2.62.0    2023-10-24 [1] Bioconductor\n BiocFileCache          2.10.1    2023-10-26 [1] Bioconductor\n BiocGenerics           0.48.1    2023-11-01 [1] Bioconductor\n BiocIO                 1.12.0    2023-10-24 [1] Bioconductor\n BiocManager            1.30.22   2023-08-08 [1] CRAN (R 4.3.2)\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n BiocStyle              2.30.0    2023-10-24 [1] Bioconductor\n biomaRt              * 2.58.0    2023-10-24 [1] Bioconductor\n Biostrings             2.70.1    2023-10-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.2)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.2)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n curl                   5.2.0     2023-12-08 [1] CRAN (R 4.3.2)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.2)\n dbplyr                 2.4.0     2023-10-26 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n doubletrouble        * 1.3.4     2024-02-05 [1] Bioconductor\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n filelock               1.0.3     2023-12-11 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb           1.38.2    2023-12-13 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicAlignments      1.38.0    2023-10-24 [1] Bioconductor\n GenomicFeatures        1.54.1    2023-10-29 [1] Bioconductor\n GenomicRanges          1.54.1    2023-10-29 [1] Bioconductor\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4     2023-10-12 [1] CRAN (R 4.3.2)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n httr                   1.4.7     2023-08-15 [1] CRAN (R 4.3.2)\n igraph                 2.0.1.1   2024-01-30 [1] CRAN (R 4.3.2)\n intergraph             2.0-3     2023-08-20 [1] CRAN (R 4.3.2)\n IRanges                2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n KEGGREST               1.42.0    2023-10-24 [1] Bioconductor\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n MASS                   7.3-60    2023-05-04 [4] CRAN (R 4.3.1)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics         1.14.0    2023-10-24 [1] Bioconductor\n matrixStats            1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n mclust                 6.0.1     2023-11-15 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n MSA2dist               1.6.0     2023-10-24 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n network                1.18.2    2023-12-05 [1] CRAN (R 4.3.2)\n networkD3              0.4       2017-03-18 [1] CRAN (R 4.3.2)\n nlme                   3.1-163   2023-08-09 [4] CRAN (R 4.3.1)\n pheatmap               1.0.12    2019-01-04 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n prettyunits            1.2.0     2023-09-24 [1] CRAN (R 4.3.2)\n progress               1.2.3     2023-12-06 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.11    2023-07-06 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.13 2023-11-02 [1] CRAN (R 4.3.2)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.2)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.2     2023-11-04 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n Rsamtools              2.18.0    2023-10-24 [1] Bioconductor\n RSQLite                2.3.4     2023-12-08 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n rtracklayer            1.62.0    2023-10-24 [1] Bioconductor\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors              0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n seqinr                 4.2-36    2023-12-08 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n SparseArray            1.2.2     2023-11-07 [1] Bioconductor\n statnet.common         4.9.0     2023-05-24 [1] CRAN (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment   1.32.0    2023-10-24 [1] Bioconductor\n syntenet             * 1.4.0     2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  2.5.2     2023-10-30 [1] CRAN (R 4.3.2)\n xfun                   0.41      2023-11-01 [1] CRAN (R 4.3.2)\n XML                    3.99-0.16 2023-11-29 [1] CRAN (R 4.3.2)\n xml2                   1.3.6     2023-12-04 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n",
    "supporting": [
      "chapter_02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}